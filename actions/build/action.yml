name: CI Build
description: Builds the given Earthly target
inputs:
  earthfile:
    description: Path to the Earthfile (excluding /Earthfile suffix) to build
    required: true
  earthly_flags:
    description: Additional flags to pass to Earthly
    required: false
    default: ""
  earthly_satellite:
    description: The address of the remote Earthly satellite to use
    required: false
    default: ""
  images:
    description: A space separated list of images the target will produce
    required: false
    default: ""
  publish:
    description: If "true", then publish resulting container images to a registry
    required: false
    default: "false"
  registry:
    description: The registry to publish containers images to
    required: false
    default: ""
  tags:
    description: A space separated list of tags to tag the resulting images with
    required: false
    default: ""
  target:
    description: The target to build for the given Earthfile
    required: true
  target_flags:
    description: Additional flags to pass to the Earthly target
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Build
      uses: nick-fields/retry@v2
      with:
        max_attempts: 3
        on_retry_command: docker image prune --all --force
        timeout_minutes: 180
        command: |
          EARTHLY_FLAGS=()
          TARGET_FLAGS=()

          if [[ -n "${{ inputs.earthly_satellite}}" ]]; then
            EARTHLY_FLAGS+=("--buildkit-host" "tcp://${{ inputs.earthly_satellite }}:8372")
          fi

          if [[ "${{ inputs.publish }}" == "true" ]]; then
            TARGET_FLAGS+=("--tag", "latest")
          fi

          earthly \
            "${EARTHLY_FLAGS[@]}" \
            ${{ inputs.earthly_flags }} \
            ${{ inputs.earthfile }}+${{ inputs.target }}  \
            "${TARGET_FLAGS[@]}" \
            ${{ inputs.target_flags }}

          if [[ "${{ inputs.publish }}" == "true" ]]; then
            for image in ${{ inputs.images }}; do
              for tag in ${{ inputs.tags }}; do
                echo "Tagging ${image}:latest as ${{ inputs.registry }}/${image}:${tag}"
                docker tag "${image}:latest" "${{ inputs.registry }}/${image}:${tag}"

                echo "Pushing ${{ inputs.registry }}/${image}:${tag}"
                docker push "${{ inputs.registry }}/${image}:${tag}"
              done
            done
          fi
