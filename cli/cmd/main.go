package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"os/user"
	"path/filepath"
	"strings"
	"text/template"
	"time"

	"github.com/alecthomas/kong"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/input-output-hk/catalyst-ci/cli/pkg"
	"github.com/input-output-hk/catalyst-ci/cli/pkg/executors"
	"github.com/input-output-hk/catalyst-ci/cli/pkg/fetchers"
	"github.com/input-output-hk/catalyst-ci/cli/pkg/git_clients"
	"github.com/input-output-hk/catalyst-ci/cli/pkg/parsers"
	"github.com/input-output-hk/catalyst-ci/cli/pkg/scanners"
	"github.com/input-output-hk/catalyst-ci/cli/pkg/util"
	"github.com/spf13/afero"
	"gopkg.in/yaml.v3"
)

// TagTemplate is a template for generating image tags.
type TagTemplate struct {
	Hash      string
	Timestamp string
	Version   string
}

var cli struct {
	Images imagesCmd `cmd:"" help:"Find the images generated by an Earthfile target."`
	Scan   scanCmd   `cmd:"" help:"Scan for Earthfiles."`
	Setup  setupCmd  `cmd:"" help:"Setup Earthly to connect to a remote satellite."`
	Tags   tagsCmd   `cmd:"" help:"Generate image tags with the current git context."`
}

type imagesCmd struct {
	JsonOutput bool   `short:"j" long:"json" help:"Output in JSON format"`
	Path       string `                      help:"path to Earthfile"               arg:"" type:"path"`
	Target     string `short:"t"             help:"The target to search for images"                    required:"true"`
}

func (c *imagesCmd) Run() error {
	parser := parsers.NewEarthlyParser()
	earthfile, err := parser.Parse(c.Path)
	if err != nil {
		return err
	}

	images, err := earthfile.GetImages(c.Target)
	if err != nil {
		return err
	}

	if c.JsonOutput {
		jsonImages, err := json.Marshal(images)
		if err != nil {
			return err
		}
		fmt.Println(string(jsonImages))
		return nil
	} else {
		for _, image := range images {
			fmt.Println(image)
		}
	}

	return nil
}

type scanCmd struct {
	JsonOutput bool     `short:"j" long:"json"   help:"Output in JSON format"`
	Images     bool     `short:"i" long:"images" help:"Also output images for the target of each Earthfile (requires -t option)"`
	Paths      []string `                        help:"paths to scan for Earthfiles"                                             arg:"" type:"path"`
	Target     string   `short:"t"               help:"filter by Earthfiles that include this target"                                               default:""`
}

func (c *scanCmd) Run() error {
	parser := parsers.NewEarthlyParser()
	scanner := scanners.NewFileScanner(c.Paths, parser, afero.NewOsFs())

	var files []pkg.Earthfile
	var err error
	if c.Target != "" {
		files, err = scanner.ScanForTarget(c.Target)
	} else {
		files, err = scanner.Scan()
	}

	if err != nil {
		return err
	}

	if c.Images {
		if c.Target == "" {
			return fmt.Errorf(
				"the --images (-i) option requires the --target (-t) option",
			)
		}

		var output = make(map[string][]string)

		for _, file := range files {
			images, err := file.GetImages(c.Target)
			if err != nil {
				return err
			}

			output[filepath.Dir(file.Path)] = images
		}

		if c.JsonOutput {
			var outFinal []interface{}
			for path, images := range output {
				out := struct {
					Images []string `json:"images"`
					Path   string   `json:"path"`
				}{
					Images: images,
					Path:   path,
				}
				outFinal = append(outFinal, out)
			}
			jsonOutput, err := json.Marshal(outFinal)
			if err != nil {
				return err
			}
			fmt.Println(string(jsonOutput))
		} else {
			for path, images := range output {
				fmt.Printf("%s %s\n", path, strings.Join(images, ","))
			}
		}

		return nil
	}

	if c.JsonOutput {
		var paths []string
		for _, file := range files {
			paths = append(paths, filepath.Dir(file.Path))
		}
		jsonFiles, err := json.Marshal(paths)
		if err != nil {
			return err
		}
		fmt.Println(string(jsonFiles))
	} else {
		for _, file := range files {
			fmt.Println(filepath.Dir(file.Path))
		}
	}

	return nil
}

type setupCmd struct {
	Path string `arg:"" help:"path to output certificates to" type:"path"`
}

func (c *setupCmd) Run() error {
	// Load AWS credentials from the default profile.
	sess := session.Must(session.NewSessionWithOptions(session.Options{
		SharedConfigState: session.SharedConfigEnable,
	}))
	fetcher := fetchers.NewAWSSatelliteCertificatesFetcher(
		"global/ci/ci-tls",
		sess,
	)

	info, err := os.Stat(c.Path)
	if err != nil {
		return err
	}

	if !info.IsDir() {
		return fmt.Errorf("path must be a directory")
	}

	certs, err := fetcher.FetchCertificates()
	if err != nil {
		return err
	}

	caPath := filepath.Join(c.Path, "ca.pem")
	certPath := filepath.Join(c.Path, "cert.pem")
	keyPath := filepath.Join(c.Path, "key.pem")

	if err := ioutil.WriteFile(caPath, []byte(strings.Replace(certs.CACertificate, "\\n", "\n", -1)), 0644); err != nil {
		return err
	}

	if err := ioutil.WriteFile(certPath, []byte(strings.Replace(certs.Certificate, "\\n", "\n", -1)), 0644); err != nil {
		return err
	}

	if err := ioutil.WriteFile(keyPath, []byte(strings.Replace(certs.PrivateKey, "\\n", "\n", -1)), 0644); err != nil {
		return err
	}

	config := pkg.SatelliteConfiguration{
		Global: pkg.SatelliteGlobalConfiguration{
			TLSCA:   caPath,
			TLSCert: certPath,
			TLSKey:  keyPath,
		},
	}
	configStr, err := yaml.Marshal(config)
	if err != nil {
		return err
	}

	usr, err := user.Current()
	if err != nil {
		panic(err)
	}

	configPath := filepath.Join(usr.HomeDir, ".earthly", "config.yml")
	if err := ioutil.WriteFile(configPath, configStr, 0644); err != nil {
		return err
	}

	return nil
}

type tagsCmd struct {
	TemplateString string `arg:"" help:"template for generating image tags" default:"{{ .Hash }}"`
}

func (c *tagsCmd) Run() error {
	executor := executors.NewLocalExecutor("git")
	client := git_clients.NewExternalGitClient(executor)

	// Collect the highest version from the git tags
	tags, err := client.Tags()
	if err != nil {
		return err
	}
	highest := util.GetHighestVersion(tags)

	// Get the current git commit hash
	hash, err := executor.Run("rev-parse", "HEAD")
	if err != nil {
		return err
	}

	// Get the current timestamp
	timestamp := time.Now().Format("20060102150405")

	// Generate the tag
	tmpl, err := template.New("tag").Parse(c.TemplateString)
	if err != nil {
		return err
	}

	data := TagTemplate{
		Hash:      hash,
		Timestamp: timestamp,
		Version:   highest,
	}
	err = tmpl.Execute(os.Stdout, data)
	if err != nil {
		return err
	}

	return nil
}

func main() {
	ctx := kong.Parse(&cli)
	err := ctx.Run()
	ctx.FatalIfErrorf(err)
	os.Exit(0)
}
