VERSION --global-cache  0.7

# cspell: words psql

# Internal: builder is our Event db builder target. Prepares all necessary artifacts.
#   CI target : dependency
builder:
    DO ./../../earthly/postgresql+BUILDER

    # MUST Manually copy the .sqlfluff config used in the repo because the COMMAND
    # above can not be passed a reference to a local target as an argument.
    COPY ./../../+repo-config/repo/.sqlfluff .

# check if the sql files are properly formatted and pass lint quality checks.
#   CI target : true
check:
    FROM +builder

    DO ./../../earthly/postgresql+CHECK

# format all SQL files in the current project.  Local developers tool.
#   CI target : false
format:
    LOCALLY

    DO ./../../earthly/postgresql+FORMAT --src=$(echo ${PWD})


# build an event db docker image.
#   CI target : true
build:
    FROM +builder

    DO ./../../earthly/postgresql+BUILD --image_name=example-db
    DO ./../../earthly/postgresql+DOCS

# Internal: common integration test image
all-tests:
    DO ./../../earthly/postgresql+INTEGRATION_TEST_SETUP
    DO ./../../utilities/scripts+ADD_BASH_SCRIPTS
    
    COPY --dir tests .

# Internal Function to run an specific integration test script.
INTEGRATION_TEST_RUN:
    COMMAND 

    ARG seed_data
    ARG test_script
    ARG migrations=true
    ARG compose="./tests/docker-compose-sa.yml"

    FROM +all-tests

    ENV INIT_AND_DROP_DB true
    ENV WITH_MIGRATIONS $migrations
    ENV WITH_SEED_DATA $seed_data
    ENV DB_NAME "ExampleDb"
    ENV DB_SUPERUSER postgres
    ENV DB_SUPERUSER_PASSWORD postgres
    ENV DB_USER example-dev
    ENV DB_USER_PASSWORD example-pass    

    WITH DOCKER \
        --compose $compose \
        --load example-db:latest=+build \
        --allow-privileged
        RUN $test_script 
    END


# Internal: Test Scenario 1
#   CI target : true
# Steps:
#   * Container runs PostgreSQL server
#   * drops and initialise db
#   * applies migrations
#   * applies seed data.
test-1:
    DO +INTEGRATION_TEST_RUN --seed_data="data" --test_script=./tests/test1.sh

# Internal: Test Scenario 2
#   CI target : dependency
# Steps:
#   * Container runs PostgreSQL server
#   * drops and initialise db
#   * doesn't apply migrations
#   * doesn't apply seed data.
test-2:
    DO +INTEGRATION_TEST_RUN --migrations=false --seed_data= --test_script=./tests/test2.sh

# Internal: Test Scenario 3
#   CI target : dependency
# Steps:
#   * Container runs PostgreSQL server
#   * drops and initialise db
#   * applies migrations
#   * doesn't apply seed data.
test-3:
    DO +INTEGRATION_TEST_RUN --seed_data= --test_script=./tests/test3.sh

# Internal: Test Scenario 4
#   CI target : dependency
# Steps:
#   * PostgreSQL server runs as a separate service
#   * drops and initialise db
#   * applies migrations
#   * applies seed data.
test-4:
    DO +INTEGRATION_TEST_RUN --compose="./tests/docker-compose-svc.yml" --seed_data="data" --test_script=./tests/test1.sh
