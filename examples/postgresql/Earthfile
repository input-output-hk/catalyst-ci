VERSION 0.7

# cspell: words psql

# Internal: builder is our Event db builder target. Prepares all necessary artifacts.
#   CI target : dependency
builder:
    DO ./../../earthly/postgresql+BUILDER --sqlfluff_cfg=./../../+repo-config/repo/.sqlfluff

# check if the sql files are properly formatted and pass lint quality checks.
#   CI target : true
check:
    FROM +builder

    DO ./../../earthly/postgresql+CHECK

# format all SQL files in the current project.  Local developers tool.
#   CI target : false
format:
    LOCALLY

    DO ./../../earthly/postgresql+FORMAT --src=$(echo ${PWD})


# build an event db docker image.
#   CI target : true
build:
    FROM +builder

    DO ./../../earthly/postgresql+BUILD --image_name=example-db

# Internal: common integration test image
all-tests:
    DO ./../../earthly/postgresql+INTEGRATION_TEST_SETUP
    DO ./../../utilities/scripts+ADD_BASH_SCRIPTS
    
    COPY --dir tests .

# Internal: Test Scenario 1
#   CI target : true
# Steps:
#   * Container runs PostgreSQL server
#   * drops and initialise db
#   * applies migrations
#   * applies seed data.
test-1:
    FROM +all-tests

    ENV INIT_AND_DROP_DB true
    ENV WITH_MIGRATIONS true
    ENV WITH_SEED_DATA "data"

    ENV DB_HOST=localhost
    ENV DB_NAME=ExampleDb
    ENV DB_DESCRIPTION="Example DB"
    ENV DB_SUPERUSER=postgres
    ENV DB_SUPERUSER_PASSWORD=postgres
    ENV DB_USER=example-dev
    ENV DB_USER_PASSWORD=example-pass

    COPY ./tests/docker-compose.yml .
    WITH DOCKER \
        --compose docker-compose.yml \
        --load example-db:latest=+build \
        --service example \
        --allow-privileged
        RUN ./tests/test1.sh
    END

# Internal: Test Scenario 2
#   CI target : dependency
# Steps:
#   * Container runs PostgreSQL server
#   * drops and initialise db
#   * doesn't apply migrations
#   * doesn't apply seed data.
test-2:
    FROM ./../../earthly/postgresql+postgres-base

    ENV INIT_AND_DROP_DB true
    ENV WITH_MIGRATIONS false
    ENV WITH_SEED_DATA false
    COPY ./docker-compose.yml .
    WITH DOCKER \
        --compose docker-compose.yml \
        --load example-db:latest=+build \
        --service example \
        --allow-privileged
        RUN sleep 5;\
            ! psql postgresql://example-dev:example-pass@0.0.0.0:5432/ExampleDb -c "SELECT * FROM users"
    END

# Internal: Test Scenario 3
#   CI target : dependency
# Steps:
#   * Container runs PostgreSQL server
#   * drops and initialise db
#   * applies migrations
#   * doesn't apply seed data.
test-3:
    FROM ./../../earthly/postgresql+postgres-base

    COPY ./../../earthly/utils+shell-assert/assert.sh .

    ENV INIT_AND_DROP_DB true
    ENV WITH_MIGRATIONS true
    ENV WITH_SEED_DATA false
    COPY ./docker-compose.yml .
    WITH DOCKER \
        --compose docker-compose.yml \
        --load example-db:latest=+build \
        --service example \
        --allow-privileged
        RUN sleep 5;\
            res=$(psql postgresql://example-dev:example-pass@0.0.0.0:5432/ExampleDb -c "SELECT * FROM users");\

            source assert.sh;\
            expected=$(printf " name | age \n------+-----\n(0 rows)");\
            assert_eq "$expected" "$res"
    END

# Internal: Test Scenario 4
#   CI target : dependency
# Steps:
#   * PostgreSQL server runs as a separate service
#   * drops and initialise db
#   * applies migrations
#   * applies seed data.
test-4:
    FROM ./../../earthly/postgresql+postgres-base

    COPY ./../../earthly/utils+shell-assert/assert.sh .

    ENV DB_HOST postgres
    ENV INIT_AND_DROP_DB true
    ENV WITH_MIGRATIONS true
    ENV WITH_SEED_DATA true
    COPY ./docker-compose.yml .
    WITH DOCKER \
        --compose docker-compose.yml \
        --pull postgres:16 \
        --load example-db:latest=+build \
        --service example \
        --service postgres \
        --allow-privileged
        RUN sleep 5;\
            res=$(psql postgresql://postgres:postgres@0.0.0.0:5433/ExampleDb -c "SELECT * FROM users");\
            
            source assert.sh;\
            expected=$(printf "  name   | age \n---------+-----\n Alice   |  20\n Bob     |  30\n Charlie |  40\n(3 rows)");\
            assert_eq "$expected" "$res"
    END

# test the event db database schema. Invokes all tests.
#   CI target : true
test:
    BUILD +test-1
    BUILD +test-2
    BUILD +test-3
    BUILD +test-4
