VERSION 0.7

# cspell: words psql

builder:
    FROM ./../../earthly/postgresql+postgres-base

    WORKDIR /build

    COPY --dir ./migrations ./data ./refinery.toml .
    DO ./../../earthly/postgresql+BUILDER

check:
    FROM +builder

    DO ./../../earthly/postgresql+CHECK

format:
    LOCALLY

    DO ./../../earthly/postgresql+FORMAT --src=$(echo ${PWD})

build:
    FROM +builder

    ARG tag="latest"
    ARG registry

    DO ./../../earthly/postgresql+BUILD --image_name=example-db --tag=$tag --registry=$registry

# Container runs PostgreSQL server, drops and initialise db, applies migrations, applies seed data.
test-1:
    FROM ./../../earthly/postgresql+postgres-base

    COPY ./../../earthly/utils+shell-assert/assert.sh .

    ENV INIT_AND_DROP_DB true
    ENV WITH_MIGRATIONS true
    ENV WITH_SEED_DATA true
    COPY ./docker-compose.yml .
    WITH DOCKER \
        --compose docker-compose.yml \
        --load example-db:latest=+build \
        --service example \
        --allow-privileged
        RUN sleep 5;\
            res=$(psql postgresql://example-dev:example-pass@0.0.0.0:5432/ExampleDb -c "SELECT * FROM users");\
            
            source assert.sh;\
            expected=$(printf "  name   | age \n---------+-----\n Alice   |  20\n Bob     |  30\n Charlie |  40\n(3 rows)");\
            assert_eq "$expected" "$res"
    END

# Container runs PostgreSQL server, drops and initialise db, doesn't apply migrations, doesn't apply seed data.
test-2:
    FROM ./../../earthly/postgresql+postgres-base

    ENV INIT_AND_DROP_DB true
    ENV WITH_MIGRATIONS false
    ENV WITH_SEED_DATA false
    COPY ./docker-compose.yml .
    WITH DOCKER \
        --compose docker-compose.yml \
        --load example-db:latest=+build \
        --service example \
        --allow-privileged
        RUN sleep 5;\
            ! psql postgresql://example-dev:example-pass@0.0.0.0:5432/ExampleDb -c "SELECT * FROM users"
    END

# Container runs PostgreSQL server, drops and initialise db, applies migrations, doesn't apply seed data.
test-3:
    FROM ./../../earthly/postgresql+postgres-base

    COPY ./../../earthly/utils+shell-assert/assert.sh .

    ENV INIT_AND_DROP_DB true
    ENV WITH_MIGRATIONS true
    ENV WITH_SEED_DATA false
    COPY ./docker-compose.yml .
    WITH DOCKER \
        --compose docker-compose.yml \
        --load example-db:latest=+build \
        --service example \
        --allow-privileged
        RUN sleep 5;\
            res=$(psql postgresql://example-dev:example-pass@0.0.0.0:5432/ExampleDb -c "SELECT * FROM users");\

            source assert.sh;\
            expected=$(printf " name | age \n------+-----\n(0 rows)");\
            assert_eq "$expected" "$res"
    END

# PostgreSQL server runs as a separate service, drops and initialise db, applies migrations, applies seed data.
test-4:
    FROM ./../../earthly/postgresql+postgres-base

    COPY ./../../earthly/utils+shell-assert/assert.sh .

    ENV DB_HOST postgres
    ENV INIT_AND_DROP_DB true
    ENV WITH_MIGRATIONS true
    ENV WITH_SEED_DATA true
    COPY ./docker-compose.yml .
    WITH DOCKER \
        --compose docker-compose.yml \
        --pull postgres:16 \
        --load example-db:latest=+build \
        --service example \
        --service postgres \
        --allow-privileged
        RUN sleep 5;\
            res=$(psql postgresql://postgres:postgres@0.0.0.0:5433/ExampleDb -c "SELECT * FROM users");\
            
            source assert.sh;\
            expected=$(printf "  name   | age \n---------+-----\n Alice   |  20\n Bob     |  30\n Charlie |  40\n(3 rows)");\
            assert_eq "$expected" "$res"
    END