VERSION --try --global-cache 0.7

# cspell: words USERARCH toolsets rustfmt

# Set up our target toolchains, and copy our files.
builder:
    DO ./../../earthly/rust+SETUP

    COPY --dir .cargo .config crates .
    COPY Cargo.lock Cargo.toml .
    COPY clippy.toml deny.toml rustfmt.toml .

## -----------------------------------------------------------------------------
##
## Standard CI targets.
##
## These targets are discovered and executed automatically by CI.

# Run check using the most efficient host tooling
# CI Automated Entry point.
check:
    FROM +builder

    RUN /scripts/std_checks.py

# Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-check:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +check

# Run build using the most efficient host tooling
# CI Automated Entry point.
build:
    FROM +builder

    TRY
        RUN /scripts/std_build.py   --cov_report="coverage-report.info" \
                                    --libs="bar" \
                                    --bins="foo/foo"
    FINALLY
        SAVE ARTIFACT target/nextest/ci/junit.xml AS LOCAL example.junit-report.xml
        SAVE ARTIFACT coverage-report.info AS LOCAL example.coverage-report.info
    END

    SAVE ARTIFACT target/doc doc
    SAVE ARTIFACT target/release/foo foo

# Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-build:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +build
