VERSION 0.8

IMPORT ./../../earthly/rust AS rust-ci
IMPORT ./../../earthly/container AS container

# cspell: words USERARCH toolsets

# builder : Set up our target toolchains, and copy our files.
builder:
    FROM container+main-builder --tool=rust

    COPY --keep-ts --dir \
        .cargo .config Cargo.toml clippy.toml deny.toml rustfmt.toml \
        crates \
        .

## -----------------------------------------------------------------------------
##
## Standard CI targets.
##
## These targets are discovered and executed automatically by CI.

# check : Run check using the most efficient host tooling
# CI Automated Entry point.
check:
    FROM +builder

    DO rust-ci+EXECUTE --cmd="/scripts/std_checks.py"

# all-hosts-check ; Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-check:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +check

# build : Run build using the most efficient host tooling
# CI Automated Entry point.
build:
    FROM +builder

    # This WILL save the junit and coverage reports even if it fails.
    DO rust-ci+EXECUTE \
        --cmd="/scripts/std_build.py --cov_report=$HOME/coverage-report.info --libs=bar --bins=foo/foo" \
        --junit="example.junit-report.xml" \
        --coverage="example.coverage-report.info" \
        --output="release/[^\./]+" \
        --docs="true"

    SAVE ARTIFACT target/doc doc
    SAVE ARTIFACT target/release/foo foo

# all-hosts-build : Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-build:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +build
