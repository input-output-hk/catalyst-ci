VERSION 0.7
FROM python:3.11-bullseye

mkdocs-material:
    # Derived from official mkdocs-material docker container.
    # https://github.com/squidfunk/mkdocs-material/blob/master/Dockerfile

    # What version is this
    ARG tag=latest
    ARG registry

    # Installation tmp directory
    WORKDIR /poetry

    # Environment Variables
    ENV POETRY_HOME=/poetry
    ENV PATH=$POETRY_HOME/bin:$PATH
    ENV PYTHONDONTWRITEBYTECODE=1

    # Install extra debian packages we will need to support plugins.
    RUN apt-get update && \
        apt-get install -y --no-install-recommends \
        graphviz

    # Install Poetry to manage python.
    RUN curl -sSL https://install.python-poetry.org | python3 -
    RUN poetry config installer.max-workers 10

    # Copy our dependencies.
    COPY pyproject.toml .
    COPY poetry.lock .
    COPY start.sh .

    # Install it all with poetry
    RUN poetry install --only main --no-root

    # Trust directory, required for git >= 2.35.2
    RUN git config --global --add safe.directory /docs &&\
        git config --global --add safe.directory /site

    # Carry the Kroki Docker Compose with this image.
    WORKDIR /kroki
    COPY docker-compose.kroki.yml ./docker-compose.yml

    # Set working directory
    WORKDIR /docs

    # Expose MkDocs development server port
    EXPOSE 8000

    # Start development server by default
    ENTRYPOINT ["/poetry/start.sh"]
    CMD ["serve", "--dev-addr=0.0.0.0:8000"]

    # Finish building the container, and publish to the registry
    IF [ "$registry" = "" ]
        ARG registry_final=$registry
    ELSE
        ARG registry_final=${registry}/
    END

    SAVE ARTIFACT /kroki/docker-compose.yml /kroki/docker-compose.yml

    SAVE IMAGE --push ${registry_final}mkdocs-material:${tag}

MKDOCS_BUILD:
    COMMAND
    ARG src
    ARG dest

    # Ensure the mkdocs tools are built and up-to-date.
    BUILD +mkdocs-material

    FROM earthly/dind:alpine
    WORKDIR /build
    COPY +mkdocs-material/kroki/docker-compose.yml .

    # Copy the src
    COPY --dir $src /docs

    # Docs need Kroki to build diagrams, so make sure its running.
    WITH DOCKER --compose docker-compose.yml --load mkdocs=+mkdocs-material
        RUN docker run --rm -v /docs:/docs --network=default_mkdocs mkdocs build
    END

    SAVE ARTIFACT /docs/site AS LOCAL $dest

MKDOCS_SERVE:
    COMMAND
    ARG src
    ARG port

    # Ensure the mkdocs tools are built and up-to-date.
    BUILD +mkdocs-material

    FROM earthly/dind:alpine
    WORKDIR /build
    COPY +mkdocs-material/kroki/docker-compose.yml .

    # Copy the src
    COPY --dir $src /docs

    # Docs need Kroki to build diagrams, so make sure its running.
    WITH DOCKER --compose docker-compose.yml --load mkdocs=+mkdocs-material
        RUN --privileged docker run --rm -p $port:8000 -v /docs:/docs --network=default_mkdocs mkdocs
    END

MDLINT:
    # Linting is done with MarkdownLint CLI2
    # See: https://github.com/DavidAnson/markdownlint-cli2
    COMMAND

    ARG fix
    ARG src

    RUN --no-cache echo SRC: $src

    # cspell: words davidanson
    WITH DOCKER --pull davidanson/markdownlint-cli2-rules:next
        #RUN --no-cache docker run --rm -v $src:/workdir --entrypoint sh davidanson/markdownlint-cli2-rules:next -c "ls -al; ls -al docs"
        RUN --no-cache docker run --rm -v $src:/workdir davidanson/markdownlint-cli2-rules:next "**/*.md" --config .markdownlint-cli2.jsonc $fix
    END

CSPELL:
    # Spell checking all code is done with cspell
    # See: cspell.org
    COMMAND

    ARG src

    WITH DOCKER --pull ghcr.io/streetsidesoftware/cspell:latest
        RUN --no-cache docker run --rm -v $src:/workdir ghcr.io/streetsidesoftware/cspell:latest lint .
    END


build-test:
    # Test of building docs.
    # Run with `earthly -P +build-test`
    LOCALLY

    DO +MKDOCS_BUILD --src=./sample --dest=./output/site

serve-test:
    # Need a better answer.  Can't export the port so we can't see the served docs.
    LOCALLY

    DO +MKDOCS_SERVE --src=./sample --port=10080

mdlint-test:
    # Test Markdown lint checks.
    # Run with `earthly -P +mdlint-test
    LOCALLY

    ARG src=$(echo ${PWD}/../../)

    DO +MDLINT --src=${src}

cspell-test:
    # Test spellcheck lint checks.
    # Run with `earthly -P +cspell-test
    LOCALLY

    DO +CSPELL --src=$(echo ${PWD}/../../)


#src:
#    FROM +poetry
#
#    COPY --dir src mkdocs.yml .

#build:
#    FROM +src
#
#    RUN poetry run mkdocs build
#    SAVE ARTIFACT site