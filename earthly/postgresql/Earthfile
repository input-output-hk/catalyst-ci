# Common PostgreSQL Earthly builders
VERSION 0.8

IMPORT ../rust/tools AS rust-tools
IMPORT ../../utilities/scripts AS scripts
IMPORT ../java AS java

# cspell: words psycopg

postgres-base:
    FROM postgres:16.4-bookworm

    WORKDIR /root

    # Install necessary packages 
    # Expand this list as needed, rather than adding more tools in later containers.
    RUN apt-get update && apt-get install -y \
        bash \
        build-essential \
        clang \
        cmake \
        colordiff \
        findutils \
        fontconfig \
        fonts-liberation2 \
        graphviz \
        libssl-dev \
        mold \
        openssl \
        pkgconf \
        python3-pip \
        python3-rich \
        python3-psycopg \
        ripgrep \
        wget \
        pipx \
        && rm -rf /var/lib/apt/lists/*

    # Install SQLFluff - Check
    ENV PATH="/root/.local/bin:${PATH}"
    RUN pipx install sqlfluff==3.1.1 && sqlfluff version

    # Get refinery
    COPY rust-tools+tool-refinery/refinery /bin

    # Copy our set SQL files
    COPY --dir sql /sql

    # Universal build scripts we will always need and are not target dependent.
    COPY --dir scripts /scripts
    # Copy our common scripts so we can use them inside the container.
    DO scripts+ADD_BASH_SCRIPTS
    DO scripts+ADD_PYTHON_SCRIPTS

    # Copy templates to the working directory
    COPY --dir templates /templates

    SAVE ARTIFACT /scripts /scripts
    SAVE ARTIFACT /templates /templates

# Common build setup steps.
# Arguments:
#   sqlfluff_cfg - REQUIRED - Location of repos .sqlfluff configuration file.
#   migrations - OPTIONAL - Location of Migrations directory - DEFAULT: ./migrations
#   seed - OPTIONAL - Location of Seed data directory - DEFAULT: ./seed
#   refinery_toml - OPTIONAL - Location of refinery,toml which configures migrations. DEFAULT: ./refinery.toml
BUILDER:
    FUNCTION

    ARG migrations=./migrations
    ARG seed=./seed
    ARG refinery_toml=./refinery.toml
    
    FROM +postgres-base

    WORKDIR /build

    COPY --dir $sqlfluff_cfg .
    COPY --dir $migrations .
    COPY --dir $seed .
    COPY --dir $refinery_toml .

# DOCS - FUNCTION to build the docs, needs to be run INSIDE the BUILDER like so:
# 
# This function uses SchemaSpy to generate database documentation.
# SchemaSpy creates detailed, Discoverable ER diagrams and schema documentation.
#
# To use this function:
# 1. Ensure your migrations are in the ./migrations directory
# 2. Have a refinery.toml file to configure the migrations
# 3. Define the following targets in your earthfile:
#
# builder:
#    DO github.com/input-output-hk/catalyst-ci/earthly/postgresql:<ver>+BUILDER --sqlfluff_cfg=./../../+repo-config/repo/.sqlfluff
#
# build:
#    FROM +builder
#
#    DO github.com/input-output-hk/catalyst-ci/earthly/postgresql:<ver>+BUILD --image_name=<name>
#    DO github.com/input-output-hk/catalyst-ci/earthly/postgresql:<ver>+DOCS
#
# The generated documentation will be saved in the ./docs artifact.
DOCS:
    FUNCTION

    ARG migrations=./migrations
    ARG refinery_toml=./refinery.toml

    FROM +docs-base
      
    USER postgres:postgres
    WORKDIR /docs

    COPY --dir $migrations .
    COPY --dir $refinery_toml .

    RUN /scripts/std_docs.py
    # Pull templates artifact from postgres-base
    COPY +postgres-base/templates/schema.md ./docs/schema.md

    SAVE ARTIFACT docs ./docs

docs-base:
    FROM +postgres-base

    WORKDIR /

    # Copy the JAR files from the SCHEMASPY_ARTIFACTS target
    COPY +schemaspy-artifacts/schemaspy.jar /bin/schemaspy.jar
    COPY +schemaspy-artifacts/postgresql.jar /bin/postgresql.jar

    # Use the cached java installation from the java Earthfile
    DO java+COPY_DEPS

    RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# separate target to download and cache schemaspy and postgresql JDBC jars, avoids network calls on every run
schemaspy-artifacts:
    FROM alpine:3.20.3
    ARG SCHEMASPY_VERSION=6.2.4
    ARG POSTGRESQL_JDBC_VERSION=42.7.4
    WORKDIR /build
    RUN apk add --no-cache wget && \
        wget -O schemaspy.jar https://github.com/schemaspy/schemaspy/releases/download/v${SCHEMASPY_VERSION}/schemaspy-${SCHEMASPY_VERSION}.jar && \
        wget -O postgresql.jar https://jdbc.postgresql.org/download/postgresql-${POSTGRESQL_JDBC_VERSION}.jar
    SAVE ARTIFACT schemaspy.jar /schemaspy.jar
    SAVE ARTIFACT postgresql.jar /postgresql.jar

# Linter checks for sql files
CHECK:
    FUNCTION

    RUN /scripts/std_checks.py

# Format sql files
# Just explains how to auto-format sql files.
# Can not do it LOCALLY as the command will change ownership of the fixed files
# if run within docker.
FORMAT:
    FUNCTION

    # Can not run format LOCALLY as it changes permissions of files to root:root
    RUN --no-cache printf "%s\n%s\n%s\n" \
        "SQL can only be formatted locally from the command line." \
        "Run locally installed 'sqlfluff' from the repo root:" \
        "    $ sqlfluff fix ."

# Internal: Integration Test container image
integration-test:
    FROM earthly/dind:alpine-3.20-docker-26.1.5-r0

    RUN apk add --no-cache \
            bash \
            postgresql15-client # We use PostgreSQL 16, but v15 clients will work OK with it.

    COPY +postgres-base/scripts /scripts

    WORKDIR /test


INTEGRATION_TEST_SETUP:
    FUNCTION

    FROM +integration-test


# Build PostgreSQL image.
# REQUIREMENTS: 
#  * prepare migrations files into the `./migrations` dir
#  * prepare seed data files into the `./data` dir (optional)
#  * prepare `refinery.toml` file
# Arguments:
#  * image_name: The name of the image (required).
BUILD:
    FUNCTION
    ARG --required image_name

    USER postgres:postgres

    RUN /scripts/std_build.sh

    ENTRYPOINT ["/scripts/entry.sh"]

    # Push the container...
    SAVE IMAGE ${image_name}:latest


