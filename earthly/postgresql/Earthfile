# Common PostgreSQL Earthly builders
VERSION 0.7

# cspell: words colordiff

postgres-base:
    FROM postgres:16.0-alpine3.18

    WORKDIR /root

    # Install necessary packages 
    # Expand this list as needed, rather than adding more tools in later containers.
    RUN apk add --no-cache \
            ripgrep \
            bash \
            colordiff \
            musl-dev \
            curl \
            gcc \
            py3-pip

    # Install SQLFluff
    RUN pip3 install sqlfluff==2.3.5
    RUN sqlfluff version

    # Get refinery
    COPY ../rust+rust-base/refinery /bin

    COPY ./.sqlfluff .
    COPY ./entry.sh .
    COPY ./setup-db.sql .

sqlfluff-image:
    FROM +postgres-base

    WORKDIR /sql

    RUN cp /root/.sqlfluff .

    SAVE IMAGE sqlfluff-image:latest

# Common PostgreSQL setup.
# Prepare important files needed for building image
BUILDER:
    COMMAND

    RUN cp /root/.sqlfluff .
    RUN cp /root/entry.sh .
    RUN chmod ugo+x ./entry.sh
    RUN cp /root/setup-db.sql .

# Linter checks for sql files
CHECK:
    COMMAND

    RUN sqlfluff lint .

# Format sql files
# REQUIREMENTS:
#  * build `sqlfluff-image` image via `earthly +sqlfluff-image` target
# Arguments:
#  * src : Source directory with the sql files.
FORMAT:
    COMMAND

    # Where we want to run the `lint` from.
    ARG --required src

    RUN docker run --rm -v $src:/sql sqlfluff-image:latest sqlfluff format .

# Build PostgreSQL image.
# REQUIREMENTS: 
#  * prepare migrations files into the `./migrations` dir
#  * prepare seed data files into the `./data` dir (optional)
#  * prepare `refinery.toml` file
# Arguments:
#  * tag : The tag of the image, default value `latest`.
#  * registry: The registry of the image.
#  * image_name: The name of the image (required).
BUILD:
    COMMAND

    ARG tag="latest"
    ARG --required image_name

    USER postgres:postgres

    ENTRYPOINT ["./entry.sh"]

    # Push the container...
    SAVE IMAGE ${image_name}:$tag
