# Common PostgreSQL Earthly builders
VERSION 0.7

postgress-base:
    FROM postgres:16.0-alpine3.18

    WORKDIR /root

    # Install necessary packages 
    # Expand this list as needed, rather than adding more tools in later containers.
    RUN apk add --no-cache \
            ripgrep \
            bash \
            colordiff \
            musl-dev \
            curl \
            gcc

    # Install refinery

    # Set necessary env vars from this setup.
    ENV RUSTUP_HOME=/usr/local/rustup
    ENV CARGO_HOME=/usr/local/cargo
    ENV CARGO_HOME_BIN=$CARGO_HOME/bin
    ENV PATH=$CARGO_HOME_BIN:$PATH  

    RUN curl –proto ‘=https’ –tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y -v
    RUN rustc --version && \
        cargo --version
    RUN cargo install refinery_cli --version 0.8.7
    RUN refinery --version

    COPY ./entry.sh .
    RUN chmod ugo+x ./entry.sh
    COPY setup-db.sql .

CP_SRC:
    # Copy the build src using this.
    COMMAND
    # This can be one directory like `"src/*"` or multiple src seperated by `","`:
    # eg, "example/Cargo.toml, example/Cargo.lock, example/src"
    ARG src=""

    # ONLY copy whats needed to build.  Not everything.
    # Note: rust-toolchain.toml was already copied when rust was setup.
    # Minimizing whats copied reduces needless cache misses.
    FOR --sep=", " file IN $src
        COPY --dir $file .
    END

    RUN ls -al

BUILDER:
    COMMAND

    COPY ./entry.sh .
    RUN chmod ugo+x ./entry.sh
    COPY setup-db.sql .

BUILD:
    COMMAND

    ARG tag="latest"
    ARG registry
    ARG --required image_name

    USER postgres:postgres

    ENTRYPOINT ["./entry.sh"]

    # Push the container...
    SAVE IMAGE --push ${registry}${image_name}:$tag

CHECK:
    COMMAND

builder:
    FROM +postgress-base

    WORKDIR /build

    DO +CP_SRC --src="example/migrations example/refinery.toml example/data"
    DO +BUILDER

build:
    FROM +builder

    DO +CHECK
    DO +BUILD --image_name=example-db
