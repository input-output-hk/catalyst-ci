VERSION 0.8

# cspell: words Rxxxx

# DO NOT USE `main` branch.
# When updating the artifacts, update them in `main` and then create a sequentially numbered branch from it called `Rxxxx`
# Then replace that Release version number in the path below.
# This ensures that the tools are properly cached, and will also be re-installed when the upstream artifact is updated.
# If a branch is no longer used by CI, delete it.
ARG --global BASE_URL = "https://github.com/input-output-hk/catalyst-storage/raw/chrome-for-testing/web-browsers"

#TODO(minikin): https://github.com/input-output-hk/catalyst-storage/issues/1

# Install Chrome/Chromium for testing and Chromedriver.
# There is no Chrome-for-testing build for linux/arm64, using Chromium instead.
# https://github.com/GoogleChromeLabs/chrome-for-testing/issues/1
# Define a function to install Chrome or Chromium based on the target architecture.
INSTALL_CHROME_LINUX64:
    FUNCTION

    ARG TARGETARCH
    LET BLUE='\033[0;34m'

    # TARGETARCH is the target processor architecture for which the target is being built.
    # WARNING: The value of a built-in arg (earthly) can never be overridden!
    # You must provide it as ARG, e.g., `ARG TARGETARCH` in your function to use it.
    # Read more about it here: https://docs.earthly.dev/docs/earthfile/builtin-args#platform-related-args
    IF [ "$TARGETARCH" = "amd64" ]
        RUN printf "${BLUE} Installing Google Chrome..." \
            && curl -sSL -o /opt/chrome.zip "${BASE_URL}/chrome/chrome_amd64.zip" \
            && unzip /opt/chrome.zip -d /opt/chrome \
            && dpkg -i /opt/chrome/chrome_amd64/google-chrome-stable_current_amd64.deb || true \
            && dpkg -i /opt/chrome/chrome_amd64/*.deb || true \
            && echo "Check and fix missing dependencies..." \
            && apt-get update --fix-missing \
	    && apt-get install -f -y \
            && rm -rf /opt/chrome.zip /opt/chrome
        RUN google-chrome --version
        DO +PATCH_CHROME --BIN_TO_PATCH="google-chrome"

        RUN printf "${BLUE} Installing Chromedriver..." \
            && mkdir -p /opt/chromedriver \
            && curl -L "${BASE_URL}/chrome/chromedriver-linux64.zip" \
            -o /opt/chromedriver/chromedriver.zip \
            && unzip -j /opt/chromedriver/chromedriver.zip -d /usr/local/bin/
        RUN chromedriver --version

    ELSE
        DO +INSTALL_CHROMIUM --PACKAGE_TYPE="chromium" --DOWNLOAD_URL="${BASE_URL}/chrome/chromium.zip"
        RUN chromium --version
        DO +PATCH_CHROME --BIN_TO_PATCH="chromium"

        DO +INSTALL_CHROMIUM --PACKAGE_TYPE="chromium-driver" --DOWNLOAD_URL="${BASE_URL}/chrome/chromium-driver.zip"
        RUN chromedriver --version
    END

# Install Firefox and Geckodriver from hardcoded GitHub-hosted locations.
# Geckodriver supported versions:
# https://firefox-source-docs.mozilla.org/testing/geckodriver/Support.html
INSTALL_FIREFOX_LINUX64:
    FUNCTION

    ARG TARGETARCH
    LET PLATFORM = ""
    LET BLUE = '\033[0;34m'

    RUN printf "${BLUE} Installing Firefox..."

    IF [ "$TARGETARCH" = "amd64" ]
        SET PLATFORM = "linux64"
        LET FIREFOX_URL = "${BASE_URL}/firefox/firefox-esr_115.15.0esr-1~deb12u1_amd64.deb"
    ELSE
        SET PLATFORM = "linux-aarch64"
        LET FIREFOX_URL = "${BASE_URL}/firefox/firefox-esr_115.15.0esr-1~deb12u1_arm64.deb"
    END

    RUN curl -L ${FIREFOX_URL} -o /tmp/firefox.deb \
        && apt-get update --fix-missing \
        && apt-get --fix-broken install -y /tmp/firefox.deb \
        && rm /tmp/firefox.deb

    RUN firefox --version

    # https://github.com/mozilla/geckodriver/releases
    RUN printf "${BLUE} Installing Geckodriver..."
    RUN mkdir -p /opt/geckodriver
    LET GECKODRIVER_URL = "${BASE_URL}/firefox/geckodriver-v0.35.0-${PLATFORM}.tar.gz"
    RUN curl -sL ${GECKODRIVER_URL} | tar -xz -C /opt/geckodriver/
    RUN ln -s /opt/geckodriver/geckodriver /usr/bin/geckodriver
    RUN geckodriver --version

# TODO(minikin): https://github.com/input-output-hk/catalyst-ci/issues/308
# Install Edge and EdgeDriver.
# There is no Edge version build for linux/arm64, installing only for amd64.
INSTALL_EDGE_LINUX64:
    FUNCTION

    ARG TARGETARCH
    LET BLUE ='\033[0;34m'

    IF [ "$TARGETARCH" = "amd64" ]
        ARG --required edge_version
        ARG --required edge_package_release

        RUN printf "${BLUE} Installing Edge..."
        RUN curl -LO https://packages.microsoft.com/repos/edge/pool/main/m/microsoft-edge-stable/microsoft-edge-stable_${edge_version}-${edge_package_release}_amd64.deb
        RUN apt-get update --fix-missing \
	    && apt-get --fix-broken install -y ./microsoft-edge-stable_${edge_version}-${edge_package_release}_amd64.deb
        RUN microsoft-edge-stable --version

        # https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver
        RUN printf "${BLUE} Installing Edgedriver..."
        RUN mkdir -p /opt/edgedriver
        RUN curl -L https://msedgedriver.microsoft.com/{$edge_version}/edgedriver_linux64.zip \
            -o /opt/edgedriver/edgedriver.zip
        RUN unzip /opt/edgedriver/edgedriver.zip -d /usr/local/bin/
        RUN msedgedriver --version
    END

# Installs the Chromium or Chromium driver.
INSTALL_CHROMIUM:
    FUNCTION

    ARG --required PACKAGE_TYPE
    ARG --required DOWNLOAD_URL
    LET BLUE='\033[0;34m'

    RUN printf "${BLUE} Installing the latest ${PACKAGE_TYPE} version...\n" \
        && echo "Downloading ${PACKAGE_TYPE} and dependencies from: ${DOWNLOAD_URL}" \
        && curl -sSL -o /opt/${PACKAGE_TYPE}.zip ${DOWNLOAD_URL} \
        && echo "Downloaded file information:" \
        && ls -lh /opt/${PACKAGE_TYPE}.zip \
        && echo "Unzipping ${PACKAGE_TYPE} packages..." \
        && unzip /opt/${PACKAGE_TYPE}.zip -d /opt/${PACKAGE_TYPE} \
        && echo "Contents of /opt/${PACKAGE_TYPE} after unzipping:" \
        && ls -lh /opt/${PACKAGE_TYPE}/${PACKAGE_TYPE} \
        && echo "Installing ${PACKAGE_TYPE} and dependencies..." \
        && dpkg -i /opt/${PACKAGE_TYPE}/${PACKAGE_TYPE}/*.deb || true \
        && echo "Checking for missing dependencies..." \
        && echo "Cleaning up..." \
        && rm /opt/${PACKAGE_TYPE}.zip \
        && rm -r /opt/${PACKAGE_TYPE} \
        && echo "${PACKAGE_TYPE} installation completed."

PATCH_CHROME:
    FUNCTION
    ARG --required BIN_TO_PATCH
    # patch Chrome - workaround for https://github.com/flutter/flutter/issues/154727
    ENV CHROME_EXECUTABLE="/usr/local/bin/chrome-patch.sh"
    RUN printf "${BLUE} Creating a ${BIN_TO_PATCH} patch at ${CHROME_EXECUTABLE}..." \
        && echo '#!/bin/bash' > $CHROME_EXECUTABLE \
        && echo '/usr/bin/'$BIN_TO_PATCH' --no-sandbox --disable-gpu --disable-dev-shm-usage --headless --disable-extensions --disable-popup-blocking --incognito "$@"' >> $CHROME_EXECUTABLE \
        && chmod +x $CHROME_EXECUTABLE

# Install Chrome for Testing v140 - specific version for E2E tests
INSTALL_CHROME_LINUX64_V140:
    FUNCTION

    LET BLUE='\033[0;34m'

    RUN printf "${BLUE} Installing Chrome for Testing v140..." \
        && curl -sSL -o /opt/chrome.zip "${BASE_URL}/chrome/chrome-linux64_140.zip" \
        && unzip /opt/chrome.zip -d /opt/chrome \
        && chmod +x /opt/chrome/chrome-linux64/chrome \
        && rm /opt/chrome.zip

    # Set the Chrome path environment variable
    ENV CHROME_PATH=/opt/chrome/chrome-linux64/chrome

    # Verify installation
    RUN $CHROME_PATH --version || echo "Chrome for testing v140 installation complete at $CHROME_PATH"
