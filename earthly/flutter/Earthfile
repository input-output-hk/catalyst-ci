VERSION 0.8

# cspell: words noninteractive

IMPORT ./installer AS installer

# TODO(bkioshn): https://github.com/input-output-hk/catalyst-ci/issues/322
# Install flutter.
INSTALL_FLUTTER:
    FUNCTION
    ARG version=3.35.1
    ARG TARGETARCH

    # Install Flutter
    IF [ "$TARGETARCH" = "amd64" ]
        RUN wget -qO - https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_$version-stable.tar.xz \
            | tar -xJ -C /usr/local
    ELSE IF [ "$TARGETARCH" = "arm64" ]
        GIT CLONE --branch $version https://github.com/flutter/flutter.git /usr/local/flutter
    ELSE
        RUN echo >&2 "unsupported architecture: ${TARGETARCH}"; exit 1
    END

    RUN git config --global --add safe.directory /usr/local/flutter
    ENV PATH="/usr/local/flutter/bin:/usr/local/flutter/bin/cache/dart-sdk/bin:$HOME/.pub-cache/bin:${PATH}"

    ENV CI="true"
    RUN flutter config --no-analytics
    RUN flutter --version
    RUN flutter doctor -v
    RUN flutter config --enable-web
    RUN dart pub global activate melos
    RUN dart pub global activate junitreport
    RUN dart pub global activate coverage
    RUN dart pub global activate combine_coverage
    RUN dart pub global activate license_checker

# flutter-base installs required tools and packages.
flutter-base:
    FROM debian:bookworm-20250203-slim

    ENV DEBIAN_FRONTEND=noninteractive

    # Update and install as same command so if either fails, the whole step fails and is not cached.
    # sqlite3 and libsqlite3-dev are required for running db tests in CI
    RUN apt-get update --fix-missing && \
            apt-get install -y \
            apt-utils \
            git \
            curl \
            gzip \
            unzip \
            bzip2 \
            bash \
            jq \
            gpg \
            lcov \
            tar \
            wget \
            xz-utils \
            sqlite3 \
            libsqlite3-dev

    DO +INSTALL_FLUTTER

    WORKDIR frontend

    DO installer+INSTALL_CHROME_LINUX64
    DO installer+INSTALL_FIREFOX_LINUX64

    ARG edge_version = 125.0.2535.51
    ARG edge_package_release = 1
    DO installer+INSTALL_EDGE_LINUX64 --edge_version=$edge_version --edge_package_release=$edge_package_release

# test-flutter-base : installs required tools and packages for flutter development.
test-flutter-base:
    BUILD +flutter-base

SETUP:
    FUNCTION
    FROM +flutter-base

# Runs melos bootstrap if melos.yaml file is present.
BOOTSTRAP:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running melos bootstrap"
        RUN melos bootstrap
    ELSE
        RUN echo "No melos.yaml file found"
    END

# Generates dart code from open api spec.
OPENAPI_CODE_GEN:
    FUNCTION

    ARG SAVE_LOCALLY=false
    ARG --required GEN_CODE_PATH
    ARG --required LOCAL_GEN_CODE_PATH

    RUN flutter pub get
    RUN dart run build_runner build --delete-conflicting-outputs

    IF [ $SAVE_LOCALLY = true ]
        SAVE ARTIFACT "$GEN_CODE_PATH/*" AS LOCAL $LOCAL_GEN_CODE_PATH
    ELSE
        SAVE ARTIFACT $GEN_CODE_PATH
    END

# Validates open api generated specs.
OPENAPI_VALIDATE:
    FUNCTION

    ARG --required WORKDIR

    WORKDIR $WORKDIR
    RUN dart run openapi_validate

    SAVE ARTIFACT openapi_validate

# Runs dart static analysis.
ANALYZE:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running melos analyze"
        RUN melos analyze --fatal-infos --fatal-warnings
    ELSE
        RUN echo "Running flutter analyze"
        RUN flutter analyze --fatal-infos --fatal-warnings
    END

# Runs dart formatting check.
FORMAT:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running melos format"
        RUN melos run format-check
    ELSE
        RUN echo "Running flutter format"
        RUN flutter format --set-exit-if-changed .
    END

# Dry-runs the publish script for publishable packages.
PUBLISH_DRY_RUN:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running melos publish --dry-run"
        RUN melos publish --dry-run --yes
    ELSE
        RUN echo "Running dart pub publish --dry-run"
        RUN dart pub publish --dry-run
    END


# Runs unit tests.
UNIT_TESTS:
    FUNCTION

    ARG PLATFORM=native
    ARG REPORT=false

    IF [ -f melos.yaml ]
        IF [ $PLATFORM = native ]
            RUN echo "Running native unit tests with melos."

            IF [ $REPORT = true ]
                # We always want to save the test_reports and coverage
                # therefore we must defer the error reported here until later.
                RUN melos run test-report-native > melos-output.txt 2>&1 || touch fail

                # If not failed then print the output immediately,
                # if it has failed then it's printed at the end of the function when exiting.
                IF [ ! -f fail ]
                    RUN cat melos-output.txt
                END

                WAIT
                    SAVE ARTIFACT test_reports AS LOCAL test_reports
                    SAVE ARTIFACT coverage AS LOCAL coverage
                END

                # Defer the failure to here.
                IF [ -f fail ]
                    RUN echo "Error occurred when running: melos run test-report"; \
                        cat melos-output.txt; \
                        exit 1
                END
            ELSE
                RUN melos run test-native
            END
        END
        IF [ $PLATFORM = web ]
            RUN echo "Running web unit tests with melos."

            IF [ $REPORT = true ]
                # We always want to save the test_reports and coverage
                # therefore we must defer the error reported here until later.
                RUN melos run test-report-web > melos-output.txt 2>&1 || touch fail

                # If not failed then print the output immediately,
                # if it has failed then it's printed at the end of the function when exiting.
                IF [ ! -f fail ]
                    RUN cat melos-output.txt
                END

                WAIT
                    SAVE ARTIFACT test_reports AS LOCAL test_reports
                    SAVE ARTIFACT coverage AS LOCAL coverage
                END

                # Defer the failure to here.
                IF [ -f fail ]
                    RUN echo "Error occurred when running: melos run test-report"; \
                        cat melos-output.txt; \
                        exit 1
                END
            ELSE
                RUN melos run test-web
            END
        END
    ELSE
        IF [ $PLATFORM = native ]
            RUN echo "Running flutter native test"
            RUN flutter test
        END
        IF [ $PLATFORM = web ]
            RUN echo "Running flutter web test"
            RUN flutter test --platform chrome
        END
    END

# Build web app and save artifacts locally if needed.
# TODO(damian-molinski): This targer should become BUILD_APP with platforms ARG.
# platforms='web,android,ios'
# Because `sentry_dart_plugin` requires access to .dart_tool as well as flutter itself
# and using `sentry-cli` instead seems to not be worth effort.
BUILD_WEB:
    FUNCTION

    ARG --required TARGET
    ARG BUILD_MODE='--release'
    ARG --required BUILD_NAME
    ARG --required BUILD_NUMBER
    ARG SAVE_LOCALLY=false
    ARG WORKDIR
    ARG UPLOAD_DEBUG_SYMBOLS=false
    ARG SENTRY_ORG
    ARG SENTRY_PROJECT

    WORKDIR $WORKDIR

    LET ADDITIONAL_BUILD_ARGS = ""
    LET SENTRY_RELASE = "$SENTRY_PROJECT@$BUILD_NAME+$BUILD_NUMBER"
    LET SENTRY_DIST = "$BUILD_NUMBER"

    IF [ $UPLOAD_DEBUG_SYMBOLS = true ]
        SET ADDITIONAL_BUILD_ARGS = "--dart-define=SENTRY_RELASE=$SENTRY_RELASE $ADDITIONAL_BUILD_ARGS"
        SET ADDITIONAL_BUILD_ARGS = "--dart-define=SENTRY_DIST=$SENTRY_DIST $ADDITIONAL_BUILD_ARGS"
        SET ADDITIONAL_BUILD_ARGS = "$ADDITIONAL_BUILD_ARGS --source-maps"
    END

    RUN flutter clean
    RUN flutter pub get
    RUN flutter build web $BUILD_MODE \
        --pwa-strategy=none \
        --target $TARGET \
        --build-name=$BUILD_NAME \
        --build-number=$BUILD_NUMBER \
        $ADDITIONAL_BUILD_ARGS

    IF [ $UPLOAD_DEBUG_SYMBOLS = true ]
        RUN --secret SENTRY_AUTH_TOKEN=SENTRY_AUTH_TOKEN \
            flutter pub run sentry_dart_plugin \
            --sentry-define=org=$SENTRY_ORG \
            --sentry-define=project=$SENTRY_PROJECT \
            --sentry-define=release=$SENTRY_RELASE \
            --sentry-define=dist=$SENTRY_DIST
    END

    WORKDIR "$WORKDIR/build"
    IF [ $SAVE_LOCALLY = true ]
        SAVE ARTIFACT web /web AS LOCAL web
    ELSE
        SAVE ARTIFACT web /web
    END
