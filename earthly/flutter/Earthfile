VERSION 0.8

# cspell: words noninteractive

IMPORT ./installer AS installer

# flutter-src save Flutter source code as artifact.
flutter-src:
    FROM busybox
    ARG version=3.24.1
    ARG TARGETARCH

    RUN mkdir -p /flutter
    IF [ "$TARGETARCH" = "amd64" ]
        RUN wget -qO - https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_$version-stable.tar.xz \
            | tar -xJ -C /flutter
    ELSE
        GIT CLONE --branch $version https://github.com/flutter/flutter.git /flutter
    END
    SAVE ARTIFACT /flutter flutter

# flutter-base installs required tools and packages.
flutter-base:
    FROM debian:bookworm-20240513-slim

    ENV DEBIAN_FRONTEND=noninteractive

    RUN apt-get update --fix-missing
    RUN apt-get install -y apt-utils git curl gzip unzip bzip2 bash jq gpg lcov

    WORKDIR frontend

    DO installer+INSTALL_CHROME_LINUX64
    DO installer+INSTALL_FIREFOX_LINUX64

    ARG edge_version = 125.0.2535.51
    ARG edge_package_release = 1
    DO installer+INSTALL_EDGE_LINUX64 --edge_version=$edge_version --edge_package_release=$edge_package_release

    COPY +flutter-src/flutter /usr/local
    ENV PATH="/usr/local/flutter/bin:/usr/local/flutter/bin/cache/dart-sdk/bin:$HOME/.pub-cache/bin:${PATH}"
    # Flutter prints warnings when used by root user but omits them if has CI env flag found.
    # script: https://github.com/flutter/flutter/blob/master/bin/internal/shared.sh#L214
    ENV CI="true"
    RUN flutter config --no-analytics
    RUN flutter --version
    RUN flutter doctor -v
    RUN flutter config --enable-web
    RUN dart pub global activate melos
    RUN dart pub global activate junitreport
    RUN dart pub global activate coverage
    RUN dart pub global activate combine_coverage
    RUN dart pub global activate license_checker

# test-flutter-base-amd64 : installs required tools and packages for amd64.
test-flutter-base-amd64:
    BUILD --platform=linux/amd64 +flutter-base

# test-flutter-base-arm64 : installs required tools and packages for arm64.
test-flutter-base-arm64:
    BUILD --platform=linux/arm64 +flutter-base

SETUP:
    FUNCTION
    FROM +flutter-base

# Runs melos bootstrap if melos.yaml file is present.
BOOTSTRAP:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running melos bootstrap"
        RUN melos bootstrap
    ELSE
        RUN echo "No melos.yaml file found"
    END

# Runs dart static analysis.
ANALYZE:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running melos analyze"
        RUN melos analyze --fatal-infos --fatal-warnings
    ELSE
        RUN echo "Running flutter analyze"
        RUN flutter analyze --fatal-infos --fatal-warnings
    END

# Runs dart formatting check.
FORMAT:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running melos format"
        RUN melos run format-check
    ELSE
        RUN echo "Running flutter format"
        RUN flutter format --set-exit-if-changed .
    END

# Dry-runs the publish script for publishable packages.
PUBLISH_DRY_RUN:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running melos publish --dry-run"
        RUN melos publish --dry-run --yes
    ELSE
        RUN echo "Running dart pub publish --dry-run"
        RUN dart pub publish --dry-run
    END


# Runs unit tests.
UNIT_TESTS:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running unit tests with melos."

        # We always want to save the test_reports and coverage
        # therefore we must defer the error reported here until later.
        RUN melos run test-report > melos-output.txt 2>&1 || touch fail

        # If not failed then print the output immediately,
        # if it has failed then it's printed at the end of the function when exiting.
        IF [ ! -f fail ]
            RUN cat melos-output.txt
        END

        WAIT
            SAVE ARTIFACT test_reports AS LOCAL test_reports
            SAVE ARTIFACT coverage AS LOCAL coverage
        END

        # Defer the failure to here.
        IF [ -f fail ]
            RUN echo "Error occurred when running: melos run test-report"; \
                cat melos-output.txt; \
                exit 1
        END
    ELSE
        RUN echo "Running flutter test"
        RUN flutter test
    END

# Build web app and save artifacts locally if needed.
BUILD_WEB:
    FUNCTION

    ARG --required TARGET
    ARG BUILD_MODE='--release'
    ARG SAVE_LOCALLY=false
    ARG SENTRY_DSN
    ARG WORKDIR

    WORKDIR $WORKDIR
    RUN flutter clean
    RUN flutter pub get
    RUN flutter build web --web-renderer canvaskit $BUILD_MODE --target $TARGET --dart-define SENTRY_DSN=$SENTRY_DSN

    WORKDIR "$WORKDIR/build"
    IF [ $SAVE_LOCALLY = true ]
        SAVE ARTIFACT web /web AS LOCAL web
    ELSE
        SAVE ARTIFACT web /web
    END
