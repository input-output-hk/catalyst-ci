VERSION 0.8

IMPORT ./installer AS installer

# flutter-src save Flutter source code as artifact.
flutter-src:
    FROM busybox
    ARG version=3.24.1
    ARG TARGETARCH

    RUN mkdir -p /flutter
    IF [ "$TARGETARCH" = "amd64" ]
        RUN wget -qO - https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_$version-stable.tar.xz \
            | tar -xJ -C /flutter
    ELSE
        GIT CLONE --branch $version https://github.com/flutter/flutter.git /flutter
    END
    SAVE ARTIFACT /flutter flutter

# flutter-base installs required tools and packages.
flutter-base:
    FROM debian:bookworm-20240513-slim

    RUN apt-get update --fix-missing
    RUN apt-get install -y apt-utils git curl gzip unzip bzip2 bash jq gpg lcov

    WORKDIR frontend

    # TARGETARCH is the target processor architecture for which the target is being built.
    # WARNING: The value of a builtin arg (earthly) and can never be overridden!
    # Read more about it here: https://docs.earthly.dev/docs/earthfile/builtin-args#platform-related-args
    ARG TARGETARCH
    ARG CHROME_MAJOR_VERSION = 126.0.6478.61

    DO installer+INSTALL_CHROME_LINUX64 --TARGET_ARCH=$TARGETARCH --CHROME_MAJOR_VERSION=$CHROME_MAJOR_VERSION

    DO installer+INSTALL_FIREFOX_LINUX64

    ARG edge_version = 125.0.2535.51
    ARG edge_package_release = 1
    DO installer+INSTALL_EDGE_LINUX64 --edge_version=$edge_version --edge_package_release=$edge_package_release

    COPY +flutter-src/flutter /usr/local
    ENV PATH="/usr/local/flutter/bin:/usr/local/flutter/bin/cache/dart-sdk/bin:$HOME/.pub-cache/bin:${PATH}"
    RUN flutter config --no-analytics
    RUN flutter --version
    RUN flutter doctor -v
    RUN flutter config --enable-web
    RUN dart pub global activate melos
    RUN dart pub global activate junitreport
    RUN dart pub global activate coverage
    RUN dart pub global activate combine_coverage

# flutter-base-all-hosts installs required tools and packages for all hosts.
flutter-base-all-hosts:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +flutter-base

SETUP:
    FUNCTION
    FROM +flutter-base

# Runs melos bootstrap if melos.yaml file is present.
BOOTSTRAP:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running melos bootstrap"
        RUN melos bootstrap
    ELSE
        RUN echo "No melos.yaml file found"
    END

# Generates dart code from open api spec.
OPENAPI_CODE_GEN:
    FUNCTION

    ARG SAVE_LOCALLY=false
    ARG --required GEN_CODE_PATH
    ARG --required LOCAL_GEN_CODE_PATH

    RUN flutter pub get
    RUN dart run build_runner build --delete-conflicting-outputs

    IF [ $SAVE_LOCALLY = true ]
        SAVE ARTIFACT "$GEN_CODE_PATH/*" AS LOCAL $LOCAL_GEN_CODE_PATH
    ELSE
        SAVE ARTIFACT $GEN_CODE_PATH
    END

# Validates open api generated specs.
OPENAPI_VALIDATE:
    FUNCTION

    ARG --required WORKDIR

    WORKDIR $WORKDIR
    RUN dart run openapi_validate

    SAVE ARTIFACT openapi_validate

# Runs dart static analysis.
ANALYZE:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running melos analyze"
        RUN melos analyze --fatal-infos --fatal-warnings
    ELSE
        RUN echo "Running flutter analyze"
        RUN flutter analyze --fatal-infos --fatal-warnings
    END

# Runs dart formatting check.
FORMAT:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running melos format"
        RUN melos run format-check
    ELSE
        RUN echo "Running flutter format"
        RUN flutter format --set-exit-if-changed .
    END

# Dry-runs the publish script for publishable packages.
PUBLISH_DRY_RUN:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running melos publish --dry-run"
        RUN melos publish --dry-run --yes
    ELSE
        RUN echo "Running dart pub publish --dry-run"
        RUN dart pub publish --dry-run
    END


# Runs unit tests.
UNIT_TESTS:
    FUNCTION

    IF [ -f melos.yaml ]
        RUN echo "Running unit tests with melos."
        RUN melos run test-report

        WAIT
            SAVE ARTIFACT test_reports AS LOCAL test_reports
            SAVE ARTIFACT coverage AS LOCAL coverage
        END
    ELSE
        RUN echo "Running flutter test"
        RUN flutter test
        WAIT
            SAVE ARTIFACT test_reports AS LOCAL test_reports
        END
    END

# Build web app and save artifacts locally if needed.
BUILD_WEB:
    FUNCTION

    ARG --required TARGET
    ARG BUILD_MODE='--release'
    ARG SAVE_LOCALLY=false
    ARG SENTRY_DSN
    ARG WORKDIR

    WORKDIR $WORKDIR
    RUN flutter clean
    RUN flutter pub get
    RUN flutter build web --web-renderer canvaskit $BUILD_MODE --target $TARGET --dart-define SENTRY_DSN=$SENTRY_DSN

    WORKDIR "$WORKDIR/build"
    IF [ $SAVE_LOCALLY = true ]
        SAVE ARTIFACT web /web AS LOCAL web
    ELSE
        SAVE ARTIFACT web /web
    END

# license-checker-base base license checker setup.
license-checker-base:
    DO +SETUP
    COPY ./template_license_checker.yaml .

# Perform license check for Flutter project.
LICENSE_CHECK:
    FUNCTION

    ARG license_checker_file="license_checker.yaml"
    RUN diff $license_checker_file ./template_license_checker.yaml
    RUN dart pub global activate license_checker
    RUN flutter pub get
    RUN lic_ck check-licenses --config $license_checker_file -i
