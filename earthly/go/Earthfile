VERSION 0.8

IMPORT ../rust AS rust-ci


DEPS:
    FUNCTION

    # Establish a cache
    RUN mkdir -p /go/cache && mkdir -p /go/modcache
    ENV GOCACHE=/go/cache
    ENV GOMODCACHE=/go/modcache
    CACHE --sharing shared /go

    COPY go.mod go.sum ./
    RUN go mod download

    # Install ginkgo for testing - and test it works.
    RUN go get github.com/onsi/ginkgo/v2@v2.22.2 && \
        go install github.com/onsi/ginkgo/v2/ginkgo && \
        ginkgo version

    # Save artifacts that may have been modified
    SAVE ARTIFACT go.mod AS LOCAL go.mod
    SAVE ARTIFACT go.sum AS LOCAL go.sum

FMT:
    FUNCTION

    # latest linux/amd64
    FROM cytopia/gofmt@sha256:ae76abdbc96780819ce175f7ba4bf1fec98e9f708eb680d0b949d1737a959983
    WORKDIR /work

    ARG --required src

    FOR f IN ${src}
        COPY ${f} /work/${f}
    END

    RUN gofmt -l . | grep . && exit 1 || exit 0

LINT:
    FUNCTION

    # v1.54-alpine
    FROM golangci/golangci-lint@sha256:a8423cab177c2863b863ee6d9f00c58f101cadd6120e195b2bb59fdfa189c1ae
    WORKDIR /work

    ARG --required src

    FOR f IN ${src}
        COPY ${f} /work/${f}
    END

    CACHE --sharing shared /cache
    ENV GOLANGCI_LINT_CACHE=/cache/golangci-lint
    ENV GOCACHE=/cache/go-build

    RUN go get ./...

    RUN golangci-lint run \
        --timeout 5m \
        -E errchkjson \
        -E ginkgolinter \
        -E godot \
        -E goimports \
        -E gosec \
        -E nilnil \
        -E revive \
        -E testpackage

GO_WASM_TOOL: 
    FUNCTION

    ARG TARGETARCH
    ARG tinygo_version = 0.38.0
    ARG wit_bindgen_go_version = 0.7.0

    RUN go install go.bytecodealliance.org/cmd/wit-bindgen-go@v${wit_bindgen_go_version}

    # Install tinygo
    LET path = "https://github.com/tinygo-org/tinygo/releases/download/v${tinygo_version}/tinygo_${tinygo_version}_${TARGETARCH}.deb"
    RUN wget $path
    RUN dpkg -i tinygo_${tinygo_version}_${TARGETARCH}.deb

# Install go tools needed for go WASM binding
go-wasm-builder:
    FROM golang:1.24.5-bookworm

    DO rust-ci+INSTALL_RUST
    # wasm-tools and wkg are needed
    DO rust-ci+INSTALL_TOOLS
    DO +GO_WASM_TOOL

    RUN go version
    RUN wkg --version
    RUN tinygo version
    RUN wit-bindgen-go --version
