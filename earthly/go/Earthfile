VERSION 0.8

ADD_GO_TOOLS:
    FUNCTION 

    ARG TARGETARCH
    RUN apt-get update && \
        apt-get install -y \
        gcc \
        musl-dev \
        && rm -rf /var/lib/apt/lists/*

    LET GO_VERSION = "1.23.2"

    # Install go
    IF [ "$TARGETARCH" = "amd64" ]
        LET URL = "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"
    ELSE 
        LET URL = "https://dl.google.com/go/go${GO_VERSION}.linux-arm64.tar.gz"
    END
    RUN curl -sSL $URL | tar -xz -C /usr/local

    # Set go path
    ENV GOROOT="/usr/local/go"
    ENV GOPATH="/go"
    ENV GOBIN="$GOPATH/bin"
    ENV PATH="$PATH:$GOROOT/bin:$GOPATH/bin"

    # Install golangci-lint
    RUN curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh \
        | sh -s -- -b $GOBIN v1.61.0 \
        && golangci-lint --version
    
    # Install ginkgo
    RUN go install github.com/onsi/ginkgo/ginkgo@v1.16.5 \
        && ginkgo version
    
FMT:
    FUNCTION

    ARG --required src
    RUN gofmt -l .

FIX_FMT:
    FUNCTION

    ARG --required src
    RUN gofmt -w .

LINT:
    FUNCTION
    ARG --required src

    RUN golangci-lint run \
        --timeout 5m \
        -E errchkjson \
        -E ginkgolinter \
        -E godot \
        -E goimports \
        -E gosec \
        -E nilnil \
        -E revive \
        -E testpackage

# -------------delete this line if not needed----------------
DEPS:
    FUNCTION

    # Establish a cache
    RUN mkdir -p /go/cache && mkdir -p /go/modcache
    ENV GOCACHE=/go/cache
    ENV GOMODCACHE=/go/modcache
    CACHE --sharing shared /go

    RUN go mod download

    # Install ginkgo for testing - and test it works.
    RUN go get github.com/onsi/ginkgo/v2/ginkgo && \
        go install github.com/onsi/ginkgo/v2/ginkgo && \
        ginkgo version

    # Save artifacts that may have been modified
    SAVE ARTIFACT go.mod AS LOCAL go.mod
    SAVE ARTIFACT go.sum AS LOCAL go.sum