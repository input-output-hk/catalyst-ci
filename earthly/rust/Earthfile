VERSION 0.8

IMPORT github.com/earthly/lib/rust:3.0.2 AS rust
IMPORT ./tools AS tools
IMPORT ../../utilities/scripts AS scripts

# cspell: words rustup miri ripgrep stdcfgs toolset depgraph lcov psycopg
# cspell: words TARGETPLATFORM TARGETOS TARGETARCH TARGETVARIANT USERPLATFORM USEROS USERARCH USERVARIANT

# Base Rustup build container.
# Parameters:
#  * toolchain : The `rust-toolchain` toml file.
rust-base:
    ARG TARGETPLATFORM
    ARG TARGETOS
    ARG TARGETARCH
    ARG TARGETVARIANT
    ARG USERPLATFORM
    ARG USEROS
    ARG USERARCH
    ARG USERVARIANT

    # This is our base Host toolset, and rustup.
    # The ACTUAL version of rust that will be used, and available targets
    # is controlled by a `rust-toolchain.toml` file when the `SETUP` FUNCTION is run.
    # HOWEVER, It is enforced that the rust version in `rust-toolchain.toml` MUST match this version.
    FROM rust:1.77.2-alpine3.19

    WORKDIR /root

    # Install necessary packages
    # Expand this list as needed, rather than adding more tools in later containers.
    RUN apk add --no-cache \
            musl-dev \
            mold \
            clang \
            py3-pip \
            py3-rich \
            py3-psycopg \
            ripgrep \
            bash \
            colordiff \
            graphviz \
            fontconfig \
            ttf-liberation

    # Fix up font cache
    RUN fc-cache -f

    # Make sure we have the clippy linter.
    RUN rustup component add clippy

    # Needed to generate code coverage.
    RUN rustup component add llvm-tools-preview

    # Install a nightly toolchain which matches.
    RUN rustup toolchain install nightly --component miri --component rust-src --component rustfmt --component clippy

    # Call +INIT before copying the source file to avoid installing dependencies every time source code changes. 
    # This parametrization will be used in future calls to functions of the library
    DO rust+INIT --keep_fingerprints=true

    # Install the default cargo config, and ensure its in the cached CARGO_HOME as well.
    COPY stdcfgs/cargo_config.toml $CARGO_INSTALL_ROOT/config.toml
    DO +EXECUTE --cmd="cp $CARGO_INSTALL_ROOT/config.toml $CARGO_HOME/config.toml"

# Add all tools we use for rust builds to the base builder image.
rust-base-plus-tools:
    FROM +rust-base

    COPY --keep-ts tools+tool-cargo-nextest/cargo-nextest $CARGO_INSTALL_ROOT/bin/cargo-nextest
    COPY --keep-ts tools+tool-cargo-machete/cargo-machete $CARGO_INSTALL_ROOT/bin/cargo-machete
    COPY --keep-ts tools+tool-refinery/refinery $CARGO_INSTALL_ROOT/bin/refinery
    COPY --keep-ts tools+tool-cargo-deny/cargo-deny $CARGO_INSTALL_ROOT/bin/cargo-deny
    COPY --keep-ts tools+tool-cargo-modules/cargo-modules $CARGO_INSTALL_ROOT/bin/cargo-modules
    COPY --keep-ts tools+tool-cargo-depgraph/cargo-depgraph $CARGO_INSTALL_ROOT/bin/cargo-depgraph
    COPY --keep-ts tools+tool-cargo-llvm-cov/cargo-llvm-cov $CARGO_INSTALL_ROOT/bin/cargo-llvm-cov
    COPY --keep-ts tools+tool-wasm-tools/wasm-tools $CARGO_INSTALL_ROOT/bin/wasm-tools
    COPY --keep-ts tools+tool-cargo-expand/cargo-expand $CARGO_INSTALL_ROOT/bin/cargo-expand
    COPY --keep-ts tools+tool-wit-bindgen-cli/wit-bindgen $CARGO_INSTALL_ROOT/bin/wit-bindgen
    COPY --keep-ts tools+tool-wasmtime/verify-component-adapter $CARGO_INSTALL_ROOT/bin/verify-component-adapter
    
# EXECUTE runs the cargo command "$args".
# This function is thread safe. Parallel builds of targets calling this function should be free of race conditions.
# Notice that in order to run this function, +INIT must be called first.
# Arguments:
#   - cmd: Command and its arguments. Required.
#   - output: Regex matching output artifacts files to be copied to ./target folder in the caller filesystem (image layers).
#     Use this argument when you want to SAVE an ARTIFACT from the target folder (mounted cache), always trying to minimize the total size of the copied fileset.
#     For example --output="release/[^\./]+" would keep all the files in /target/release that don't have any extension.
#
# This is heavily based off of the rust `CARGO` command in the Earthly library.
# Updates to that library must be reflected in this function when updating the version of the earthly rust library.
EXECUTE:
    FUNCTION
    DO rust+CHECK_INITED
    ARG --required cmd
    ARG output
    DO rust+SET_CACHE_MOUNTS_ENV
    IF [ "$EARTHLY_KEEP_FINGERPRINTS" = "false" ]
       DO rust+REMOVE_SOURCE_FINGERPRINTS
    END
    RUN --mount=$EARTHLY_RUST_CARGO_HOME_CACHE --mount=$EARTHLY_RUST_TARGET_CACHE \
      set -e; \
      $cmd; \
      cargo sweep -r -t $EARTHLY_SWEEP_DAYS; \
      cargo sweep -r -i;
    IF [ "$output" != "" ]
      DO rust+COPY_OUTPUT --output=$output
    END


# installer - Install necessary tools for the rust-base.
installer:
    FROM +rust-base-plus-tools

    # Universal build scripts we will always need and are not target dependent.
    COPY --dir scripts /scripts
    # Copy our common scripts so we can use them inside the container.
    DO scripts+ADD_BASH_SCRIPTS
    DO scripts+ADD_PYTHON_SCRIPTS

    # Standardized Rust configs.
    # Build will refuse to proceed if the projects rust configs do not match these.
    # This is to enforce consistent compiler and tool configuration on local setup and CI builds.
    COPY --dir stdcfgs /stdcfgs

# Builds all the rust-base targets for each supported DOCKER architecture.
# Currently only used for multi-platform cross build testing.
# This will ONLY work if you have `qemu` properly setup on linux and `rosetta` for
# docker enabled on Mac.
# Again, this is just a test target, and not for general use.
rust-base-all-hosts:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +installer

# Common Rust setup.
# Parameters:
#  * toolchain : The `rust-toolchain` toml file.
SETUP:
    FUNCTION
    FROM +installer

    ARG toolchain=./rust-toolchain.toml 

    # Copy our toolchain dependency.
    COPY $toolchain ./rust-toolchain.toml

    # Toolchain MUST be the same as vendored, and if it is the toolchain is
    # already installed.