# Common Rust UDCs and Builders.
VERSION --global-cache --use-function-keyword 0.7

# cspell: words rustup miri ripgrep colordiff stdcfgs toolset depgraph lcov psycopg bindgen
# cspell: words TARGETPLATFORM TARGETOS TARGETARCH TARGETVARIANT USERPLATFORM USEROS USERARCH USERVARIANT

# Base Rustup build container.
# Parameters:
#  * toolchain : The `rust-toolchain` toml file.
rust-base:
    ARG TARGETPLATFORM
    ARG TARGETOS
    ARG TARGETARCH
    ARG TARGETVARIANT
    ARG USERPLATFORM
    ARG USEROS
    ARG USERARCH
    ARG USERVARIANT

    # This is our base Host toolset, and rustup.
    # The ACTUAL version of rust that will be used, and available targets
    # is controlled by a `rust-toolchain.toml` file when the `SETUP` UDC is run.
    # HOWEVER, It is enforced that the rust version in `rust-toolchain.toml` MUST match this version.
    FROM rust:1.75-alpine3.19

    RUN echo "TARGETPLATFORM = $TARGETPLATFORM"; \
        echo "TARGETOS       = $TARGETOS"; \
        echo "TARGETARCH     = $TARGETARCH"; \
        echo "TARGETVARIANT  = $TARGETVARIANT"; \
        echo "USERPLATFORM   = $USERPLATFORM"; \
        echo "USEROS         = $USEROS"; \
        echo "USERARCH       = $USERARCH"; \
        echo "USERVARIANT    = $USERVARIANT";

    WORKDIR /root

    # Install necessary packages
    # Expand this list as needed, rather than adding more tools in later containers.
    RUN apk add --no-cache \
            musl-dev \
            mold \
            clang \
            py3-pip \
            py3-rich \
            py3-psycopg \
            ripgrep \
            bash \
            colordiff \
            graphviz \
            fontconfig \
            ttf-liberation

    # Fix up font cache
    RUN fc-cache -f

    # Make sure we have the clippy linter.
    RUN rustup component add clippy

    # Needed to generate code coverage.
    RUN rustup component add llvm-tools-preview

    # Install a nightly toolchain which matches.
    RUN rustup toolchain install nightly --component miri --component rust-src --component rustfmt --component clippy

    # Install the default cargo config.
    COPY stdcfgs/cargo_config.toml $CARGO_HOME/config.toml

    # Install rust based tooling
    # Install tools we use commonly with `cargo`.
    # Note, we disable static compiles for tools, specifically, as its not required.
    # These tools are not artifacts and we do not use them in production.
    RUN cargo install cargo-nextest --version=0.9.67 && \
        cargo install cargo-machete --version=0.6.0  && \
        cargo install refinery_cli  --version=0.8.12 && \
        cargo install cargo-deny    --version=0.14.10 && \
        cargo install cargo-modules --version=0.13.5 && \
        cargo install cargo-depgraph --version=1.6.0 && \
        cargo install cargo-llvm-cov --version=0.6.4 && \
        cargo install --git https://github.com/bytecodealliance/wasmtime --tag v17.0.0 verify-component-adapter && \
        cargo install --git https://github.com/bytecodealliance/wit-bindgen --rev 442f005 wit-bindgen-cli

    SAVE ARTIFACT $CARGO_HOME/bin/refinery refinery

    # Universal build scripts we will always need and are not target dependent.
    COPY --dir scripts /scripts
    # Copy our common scripts so we can use them inside the container.
    DO ../../utilities/scripts+ADD_BASH_SCRIPTS
    DO ../../utilities/scripts+ADD_PYTHON_SCRIPTS

    # Standardized Rust configs.
    # Build will refuse to proceed if the projects rust configs do not match these.
    # This is to enforce consistent compiler and tool configuration on local setup and CI builds.
    COPY --dir stdcfgs /stdcfgs

# Builds all the rust-base targets for each supported DOCKER architecture.
# Currently only used for multi-platform cross build testing.
# This will ONLY work if you have `qemu` properly setup on linux and `rosetta` for
# docker enabled on Mac.
# Again, this is just a test target, and not for general use.
rust-base-all-hosts:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +rust-base

# Common Rust setup.
# Parameters:
#  * toolchain : The `rust-toolchain` toml file.
SETUP:
    FUNCTION
    FROM +rust-base

    ARG toolchain=./rust-toolchain.toml 

    # Copy our toolchain dependency.
    COPY $toolchain ./rust-toolchain.toml

    # Install pinned Rustup from `rust-toolchain.toml`
    # Plus nightly latest so we can use it for docs, lints, etc.
    RUN rustup show && \
        cargo --version && \
        cargo +nightly --version
