VERSION 0.8

IMPORT ./tools AS tools

# cspell: words rustup miri ripgrep stdcfgs toolset depgraph lcov psycopg
# cspell: words TARGETPLATFORM TARGETOS TARGETARCH TARGETVARIANT USERPLATFORM USEROS USERARCH USERVARIANT

# Base Rustup build container.
# Parameters:
#  * toolchain : The `rust-toolchain` toml file.
rust-base:
    ARG TARGETPLATFORM
    ARG TARGETOS
    ARG TARGETARCH
    ARG TARGETVARIANT
    ARG USERPLATFORM
    ARG USEROS
    ARG USERARCH
    ARG USERVARIANT

    # This is our base Host toolset, and rustup.
    # The ACTUAL version of rust that will be used, and available targets
    # is controlled by a `rust-toolchain.toml` file when the `SETUP` UDC is run.
    # HOWEVER, It is enforced that the rust version in `rust-toolchain.toml` MUST match this version.

    # WARNING:
    # Dont bump the version of the alpine.
    # A potential bug was found inside `libgcc:13` version.
    # It works fine with the `libgcc:12` version.
    # Look: https://github.com/bytecodealliance/wasmtime/issues/7997
    FROM rust:1.75-alpine3.19

    RUN echo "TARGETPLATFORM = $TARGETPLATFORM"; \
        echo "TARGETOS       = $TARGETOS"; \
        echo "TARGETARCH     = $TARGETARCH"; \
        echo "TARGETVARIANT  = $TARGETVARIANT"; \
        echo "USERPLATFORM   = $USERPLATFORM"; \
        echo "USEROS         = $USEROS"; \
        echo "USERARCH       = $USERARCH"; \
        echo "USERVARIANT    = $USERVARIANT";
    WORKDIR /root

    # Install necessary packages
    # Expand this list as needed, rather than adding more tools in later containers.
    RUN apk add --no-cache \
            musl-dev \
            mold \
            clang \
            py3-pip \
            py3-rich \
            py3-psycopg \
            ripgrep \
            bash \
            colordiff \
            graphviz \
            fontconfig \
            ttf-liberation

    # Fix up font cache
    RUN fc-cache -f

    # Make sure we have the clippy linter.
    RUN rustup component add clippy

    # Needed to generate code coverage.
    RUN rustup component add llvm-tools-preview

    # Install a nightly toolchain which matches.
    RUN rustup toolchain install nightly --component miri --component rust-src --component rustfmt --component clippy

    # Install the default cargo config.
    COPY stdcfgs/cargo_config.toml $CARGO_HOME/config.toml

    
builder:
    FROM +rust-base

    COPY tools+tool-cargo-nextest/cargo-nextest $CARGO_HOME/bin/cargo-nextest
    COPY tools+tool-cargo-machete/cargo-machete $CARGO_HOME/bin/cargo-machete
    COPY tools+tool-refinery/refinery $CARGO_HOME/bin/refinery
    COPY tools+tool-cargo-deny/cargo-deny $CARGO_HOME/bin/cargo-deny
    COPY tools+tool-cargo-modules/cargo-modules $CARGO_HOME/bin/cargo-modules
    COPY tools+tool-cargo-depgraph/cargo-depgraph $CARGO_HOME/bin/cargo-depgraph
    COPY tools+tool-cargo-llvm-cov/cargo-llvm-cov $CARGO_HOME/bin/cargo-llvm-cov
    COPY tools+tool-wasm-tools/wasm-tools $CARGO_HOME/bin/wasm-tools
    COPY tools+tool-cargo-expand/cargo-expand $CARGO_HOME/bin/cargo-expand
    COPY tools+tool-wit-bindgen-cli/wit-bindgen $CARGO_HOME/bin/wit-bindgen
    COPY tools+tool-wasmtime/verify-component-adapter $CARGO_HOME/bin/verify-component-adapter

    # Universal build scripts we will always need and are not target dependent.
    COPY --dir scripts /scripts
    # Copy our common scripts so we can use them inside the container.
    DO ../../utilities/scripts+ADD_BASH_SCRIPTS
    DO ../../utilities/scripts+ADD_PYTHON_SCRIPTS

    # Standardized Rust configs.
    # Build will refuse to proceed if the projects rust configs do not match these.
    # This is to enforce consistent compiler and tool configuration on local setup and CI builds.
    COPY --dir stdcfgs /stdcfgs

    RUN ls

# Builds all the rust-base targets for each supported DOCKER architecture.
# Currently only used for multi-platform cross build testing.
# This will ONLY work if you have `qemu` properly setup on linux and `rosetta` for
# docker enabled on Mac.
# Again, this is just a test target, and not for general use.
rust-base-all-hosts:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +builder

# Common Rust setup.
# Parameters:
#  * toolchain : The `rust-toolchain` toml file.
SETUP:
    FUNCTION
    FROM +builder

    ARG toolchain=./rust-toolchain.toml 

    # Copy our toolchain dependency.
    COPY $toolchain ./rust-toolchain.toml

    # Install pinned Rustup from `rust-toolchain.toml`
    # Plus nightly latest so we can use it for docs, lints, etc.
    RUN rustup show && \
        cargo --version && \
        cargo +nightly --version
