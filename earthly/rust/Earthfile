# Common Rust UDCs and Builders.
VERSION --global-cache 0.7

# cspell: words rustup miri nextest ripgrep colordiff rustfmt stdcfgs toolset readelf depgraph lcov psycopg
# cspell: words TARGETPLATFORM TARGETOS TARGETARCH TARGETVARIANT USERPLATFORM USEROS USERARCH USERVARIANT

# Base Rustup build container.
rust-base:
    ARG TARGETPLATFORM
    ARG TARGETOS
    ARG TARGETARCH
    ARG TARGETVARIANT
    ARG USERPLATFORM
    ARG USEROS
    ARG USERARCH
    ARG USERVARIANT

    # This is our base Host toolset, and rustup.
    # The ACTUAL version of rust that will be used, and available targets
    # is controlled by a `rust-toolchain.toml` file when the `SETUP` UDC is run.
    # HOWEVER, It is enforced that the rust version in `rust-toolchain.toml` MUST match this version.
    FROM rust:1.73-alpine3.18

    RUN echo "TARGETPLATFORM = $TARGETPLATFORM"; \
        echo "TARGETOS       = $TARGETOS"; \
        echo "TARGETARCH     = $TARGETARCH"; \
        echo "TARGETVARIANT  = $TARGETVARIANT"; \
        echo "USERPLATFORM   = $USERPLATFORM"; \
        echo "USEROS         = $USEROS"; \
        echo "USERARCH       = $USERARCH"; \
        echo "USERVARIANT    = $USERVARIANT";

    WORKDIR /root

    # Install necessary packages
    # Expand this list as needed, rather than adding more tools in later containers.
    RUN apk add --no-cache \
            musl-dev \
            mold \
            clang \
            py3-pip \
            py3-rich \
            py3-psycopg \
            ripgrep \
            bash \
            colordiff \
            graphviz \
            fontconfig \
            ttf-liberation

    # Fix up font cache
    RUN fc-cache -f

    # Make sure we have the clippy linter.
    RUN rustup component add clippy

    # Needed to generate code coverage.
    RUN rustup component add llvm-tools-preview

    # Install a nightly toolchain which matches.
    RUN rustup toolchain install nightly --component miri --component rust-src --component rustfmt --component clippy

    # Install the default cargo config.
    COPY stdcfgs/cargo_config.toml $CARGO_HOME/config.toml

    # Install rust based tooling
    # Install tools we use commonly with `cargo`.
    # Note, we disable static compiles for tools, specifically, as its not required.
    # These tools are not artifacts and we do not use them in production.
    RUN cargo install cargo-nextest --version=0.9.59 && \
        cargo install cargo-machete --version=0.6.0  && \
        cargo install refinery_cli  --version=0.8.11 && \
        cargo install cargo-deny    --version=0.14.3 && \
        cargo install cargo-modules --version=0.10.2 && \
        cargo install cargo-depgraph --version=1.5.0 && \
        cargo install cargo-llvm-cov --version=0.5.39 && \
        cargo install --git https://github.com/bytecodealliance/wasmtime --tag v16.0.0 verify-component-adapter

    SAVE ARTIFACT $CARGO_HOME/bin/refinery refinery

    # Universal build scripts we will always need and are not target dependent.
    COPY --dir scripts /scripts
    # Copy our common scripts so we can use them inside the container.
    DO ../../utilities/scripts+ADD_BASH_SCRIPTS
    DO ../../utilities/scripts+ADD_PYTHON_SCRIPTS

    # Standardized Rust configs.
    # Build will refuse to proceed if the projects rust configs do not match these.
    # This is to enforce consistent compiler and tool configuration on local setup and CI builds.
    COPY --dir stdcfgs /stdcfgs

# Builds all the rust-base targets for each supported DOCKER architecture.
# Currently only used for multi-platform cross build testing.
# This will ONLY work if you have `qemu` properly setup on linux and `rosetta` for
# docker enabled on Mac.
# Again, this is just a test target, and not for general use.
rust-base-all-hosts:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +rust-base

# Common Rust setup.
# Parameters:
#  * toolchain : The `rust-toolchain` toml file.
SETUP:
    COMMAND
    ARG toolchain=./rust-toolchain.toml

    # Copy our toolchain dependency.
    COPY $toolchain ./rust-toolchain.toml
    ENV default_rust_channel=$(rg -oP 'channel\s*=\s*"\K[^"]+' rust-toolchain.toml)

    # Check that `default_rust_channel` and $RUST_VERSION from the rust-base container are exactly the same.
    # This ensures CI Rust version and local rust version are properly aligned and prevents version skew.
    RUN /scripts/verify_toolchain.sh $default_rust_channel $RUST_VERSION

    # Install pinned Rustup from `rust-toolchain.toml`
    # Plus nightly latest so we can use it for docs, lints, etc.
    RUN rustup default $default_rust_channel && \
        rustup show && \
        cargo --version && \
        cargo +nightly --version

# Steps we do during the `check` CI phase for all Rust programs
CHECK:
    COMMAND

    # This is set up so that ALL checks are run and it will fail if any fail.
    # This improves visibility into all issues that need to be corrected for `check`
    # to pass without needing to iterate excessively.
    RUN /scripts/std_checks.py

# Step we do during the `build` CI phase for all Rust programs
# Parameters:
#  * target: Rust target value (cargo --target flag).
#  * package: Rust package value (cargo --package flag).
#  * cov_report: The output coverage report file path.
#  * libs : The list of lib crates `cargo-modules` docs to build.
#  * bins : The list of binaries `cargo-modules` docs to build.
BUILD:
    COMMAND
    ARG target=""
    ARG package=""
    ARG cov_report=""
    ARG libs=""
    ARG bins=""

    RUN /scripts/std_build.py --target=$target --package=$package --cov_report=$cov_report --libs=$libs --bins=$bins

# Check if the build executable, isn't a busted mess.
SMOKE_TEST:
    COMMAND
    ARG --required bin

    RUN ldd target/release/$bin
    RUN readelf -p .comment target/release/$bin
    RUN strip -v target/release/$bin

    # ALL executables MUST have `--help` as an option.
    RUN target/release/$bin --help
