VERSION 0.8

# cspell: words tomljson

# To ensure all consumers of `catalyst-ci` use the correct upstream,
# the Rust library from Earthly can only be imported in this Earthfile.
# FUNCTIONs or targets in that Earthfile MUST be shimmed here.
# No other earthfile should reference the rust library in the earthly/lib repo.
IMPORT github.com/earthly/lib/rust:3.0.3 AS rust

# Local Earthfile reference imports
IMPORT ./tools AS rust-tools
IMPORT ../../utilities/scripts AS scripts

# cspell: words miri ripgrep toolset lcov psycopg
# cspell: words TARGETPLATFORM TARGETOS TARGETARCH TARGETVARIANT USERPLATFORM USEROS USERARCH USERVARIANT
# cspell: words findutils fileset pkgconfig wasip

# rust-base : Base Rustup build container.
#   Not called directly, used by other targets.
rust-base:
    ARG TARGETPLATFORM
    ARG TARGETOS
    ARG TARGETARCH
    ARG TARGETVARIANT
    ARG USERPLATFORM
    ARG USEROS
    ARG USERARCH
    ARG USERVARIANT

    # This is our base Host toolset, and rustup.
    # Never use `rust-toolchain.toml` in CI as it breaks builds.
    # The only toolchain supported is the one installed here.
    FROM rust:1.81.0-slim-bookworm

    WORKDIR /root

    # Enables rust backtrace when something panics
    ENV RUST_BACKTRACE=full

    # Install necessary packages
    # Expand this list as needed, rather than adding more tools in later containers.
    #
    # Note: openssl-dev and openssl-libs-static are added to support the cargo-component crate.
    #       if that crate is removed, these dependencies can also be removed.
    RUN apt-get update && apt-get install -y \
        bash \
        build-essential \
        clang \
        cmake \
        colordiff \
        findutils \
        fontconfig \
        fonts-liberation2        \
        graphviz \
        libssl-dev \
        mold \
        openssl \
        pkgconf \
        python3-pip \
        python3-rich \
        python3-psycopg \
        ripgrep \
        wget \
        && rm -rf /var/lib/apt/lists/*

    # Fix up font cache.
    RUN fc-cache -f

    # Make sure we have cargo.
    RUN rustup component add cargo

    # Make sure we have the clippy linter.
    RUN rustup component add clippy

    # Needed to generate code coverage.
    RUN rustup component add llvm-tools-preview

    # Install a nightly toolchain which matches.
    RUN rustup toolchain install nightly --component miri --component rust-src --component rustfmt --component clippy --component cargo

    # Ensure we have all the necessary targets
    RUN rustup target add wasm32-unknown-unknown
    RUN rustup target add wasm32-wasip1
    # RUN rustup target add wasm32-wasip2 # wasm32-wasip2 not yet available in stable - Try again in 1.82
    RUN rustup target add x86_64-unknown-linux-gnu
    RUN rustup target add x86_64-apple-darwin
    RUN rustup target add x86_64-pc-windows-gnu
    RUN rustup target add aarch64-unknown-linux-gnu
    RUN rustup target add aarch64-apple-darwin

    RUN rustup target add wasm32-unknown-unknown --toolchain nightly
    RUN rustup target add wasm32-wasip1 --toolchain nightly 
    RUN rustup target add wasm32-wasip2 --toolchain nightly
    RUN rustup target add x86_64-unknown-linux-gnu --toolchain nightly
    RUN rustup target add x86_64-apple-darwin --toolchain nightly
    RUN rustup target add x86_64-pc-windows-gnu --toolchain nightly
    RUN rustup target add aarch64-unknown-linux-gnu --toolchain nightly
    RUN rustup target add aarch64-apple-darwin --toolchain nightly

    RUN echo $PATH
    RUN echo $CARGO_HOME
 
    # Install cargo-binstall so we can speed up tool installation.
    DO rust-tools+CARGO_BINSTALL_INSTALL

    # CARGO_HOME, PATH and RUSTUP_HOME is already set by the base container.
    # Do not change them.

# COPY_TOOL - DRY the tool installation.
COPY_TOOL:
    FUNCTION

    ARG --required tool
    ARG bin = $tool
    COPY rust-tools+tool-$tool/$bin $CARGO_HOME/bin/$bin


# rust-base-plus-tools : Add all tools we use for rust builds to the base builder image.
#   Not called directly, used by other targets.
rust-base-plus-tools:
    FROM +rust-base

    DO +COPY_TOOL --tool="cargo-nextest"
    DO +COPY_TOOL --tool="cargo-machete"
    DO +COPY_TOOL --tool="refinery"
    DO +COPY_TOOL --tool="cargo-deny"
    DO +COPY_TOOL --tool="cargo-modules"
    DO +COPY_TOOL --tool="cargo-depgraph"
    DO +COPY_TOOL --tool="cargo-llvm-cov"
    DO +COPY_TOOL --tool="wasm-tools"
    DO +COPY_TOOL --tool="cargo-expand"
    DO +COPY_TOOL --tool="wit-bindgen"
    DO +COPY_TOOL --tool="cargo-sweep"
    DO +COPY_TOOL --tool="cargo-component"
    DO +COPY_TOOL --tool="wasm-pack"

# installer - fully setup our Rust caching.
installer:
    FROM +rust-base-plus-tools

    # Call `+INIT` before copying the source file to avoid installing dependencies every time source code changes. 
    # This parametrization will be used in future calls to functions of the library
    # Init using the common cat-ci cache prefix.
    ARG keep_fingerprints=false
    ARG sweep_days=4
    ARG --required cache_prefix
    DO rust+INIT --keep_fingerprints=$keep_fingerprints --sweep_days=$sweep_days --cache_prefix=$cache_prefix

    # Set the mount cache env vars
    DO rust+SET_CACHE_MOUNTS_ENV

    # Universal build scripts we will always need and are not target dependent.
    COPY --dir scripts /scripts
    # Copy our common scripts so we can use them inside the container.
    DO scripts+ADD_BASH_SCRIPTS
    DO scripts+ADD_PYTHON_SCRIPTS

    # Standardized Rust configs.
    # Build will refuse to proceed if the projects rust configs do not match these.
    # This is to enforce consistent compiler and tool configuration on local setup and CI builds.
    COPY --dir stdcfgs /stdcfgs

# rust-base-all-hosts : Builds all the rust-base targets for each supported DOCKER architecture.
#   Currently only used for multi-platform cross build testing.
#   This will ONLY work if you have `qemu` properly setup on linux and `rosetta` for
#   docker enabled on Mac.
#   Again, this is just a test target, and not for general use.
rust-base-all-hosts:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +installer

# EXECUTE : runs the cargo command "$args".
# This function is thread safe. Parallel builds of targets calling this function should be free of race conditions.
# Notice that in order to run this function, +INIT must be called first.
# Arguments:
#   - cmd: Command and its arguments. Required.
#   - output: Regex matching output artifacts files to be copied to ./target folder in the caller filesystem (image layers).
#     Use this argument when you want to SAVE an ARTIFACT from the target folder (mounted cache), always trying to minimize the total size of the copied fileset.
#     For example --output="release/[^\./]+" would keep all the files in /target/release that don't have any extension.
#   - junit: Filename to save the junit.xml file LOCALLY.
#            Also saves the junit.xml file in the target layer.
#            If not defined, "junit.xml" will not be saved, and will not be in the layer.
#   - coverage: Filename to save the coverage-report.info as LOCALLY
#            If not defined, "coverage-report.info" will not be saved, but will be in the layer.
#
# This is heavily based off of the rust `CARGO` command in the Earthly library.
# Updates to that library must be reflected in this function when updating the version of the earthly rust library.
EXECUTE:
    FUNCTION
    DO rust+CHECK_INITED
    ARG --required cmd
    ARG args1
    ARG args2
    ARG args3
    ARG args4
    ARG args5
    ARG args6
    ARG output
    ARG junit
    ARG coverage
    ARG docs="false"
    ARG ALLOW_DEBUG_TARGET="false"
    DO rust+SET_CACHE_MOUNTS_ENV

    IF [ "$EARTHLY_KEEP_FINGERPRINTS" = "false" ]

       DO +REMOVE_SOURCE_FINGERPRINTS
    END

    # target/debug should not be present, so purge it just in case.
    IF [ "$ALLOW_DEBUG_TARGET" != "true" ]
        RUN --mount=$EARTHLY_RUST_CARGO_HOME_CACHE --mount=$EARTHLY_RUST_TARGET_CACHE \
            set -e; \
            rm -rf target/debug;
    END

    # This uses a workaround to TRY/FINALLY not working inside a FUNCTION.
    # The command is executed and a "fail" file is created ONLY if it fails.
    # We then check the existence of the "fail" file after any artifacts are saved that
    # should be saved regardless.
    RUN --mount=$EARTHLY_RUST_CARGO_HOME_CACHE --mount=$EARTHLY_RUST_TARGET_CACHE \
        set -e; \
        rm -f fail; \
        $cmd $args1 $args2 $args3 $args4 $args5 $args6; \
        cargo sweep -r -t $EARTHLY_SWEEP_DAYS; \
        cargo sweep -r -i; \
        $EARTHLY_FUNCTIONS_HOME/copy-output.sh "$output";
    RUN $EARTHLY_FUNCTIONS_HOME/rename-output.sh        
        

    # We always want to save these (if requested) even if the command fails.
    IF [ "$junit" != "" ]
        DO rust+COPY_OUTPUT --output="nextest/ci/junit.xml"
        SAVE ARTIFACT target/nextest/ci/junit.xml AS LOCAL "$junit"
    END
    IF [ "$coverage" != "" ]
        SAVE ARTIFACT coverage-report.info AS LOCAL "$coverage"
    END

    # Defer the failure to here.
    IF [ -f fail ]
        RUN echo "Error on +EXECUTE: $cmd"
        RUN exit 1
    END

    IF [ "$ALLOW_DEBUG_TARGET" != "true" ]
        RUN --mount=$EARTHLY_RUST_CARGO_HOME_CACHE --mount=$EARTHLY_RUST_TARGET_CACHE \
            if [ -d target/debug ]; then \
                echo "Error: 'target/debug' should not be built in CI.  Failing."; \
                exit 1; \
            fi;
    END

    IF [ "$docs" != "false" ]
        DO rust+COPY_OUTPUT --output="doc/.*"
        SAVE ARTIFACT target/doc doc
    END

# CARGO : Shim so we use the correct upstream RUST library consistently
# without having to import it into consuming Earthfiles.
# By default this will NOT expose docs built during the execution of cargo
CARGO:
    FUNCTION

    ARG --required args
    ARG output
    ARG ALLOW_DEBUG_TARGET="false"
    ARG junit
    ARG coverage
    ARG docs="false"

    DO +EXECUTE \
        --cmd="cargo" \
        --args1="$args" \
        --output="$output" \
        --junit="$junit" \
        --coverage="$coverage" \
        --ALLOW_DEBUG_TARGET="$ALLOW_DEBUG_TARGET" \
        --docs="$docs"

# COPY_OUTPUT : copies files out of the target cache into the image layers.
#
# This is a shim which MUST be used by projects consuming catalyst-ci rather than using the 
# upstream earthly rust library directly.
#
# Use this FUNCTION when you want to SAVE an ARTIFACT from the target folder (mounted cache), always trying to minimize the total size of the copied fileset.
# Notice that in order to run this FUNCTION, +SET_CACHE_MOUNTS_ENV or +CARGO must be called first.
# Arguments:
#   - output: Regex matching output artifacts files to be copied to ./target folder in the caller filesystem (image layers).
# Example:
#   DO rust+SET_CACHE_MOUNTS_ENV
#   RUN --mount=$EARTHLY_RUST_CARGO_HOME_CACHE --mount=$EARTHLY_RUST_TARGET_CACHE cargo build --release
#   DO rust+COPY_OUTPUT --output="release/[^\./]+" # Keep all the files in /target/release that don't have any extension.
COPY_OUTPUT:
    FUNCTION
    ARG --required output

    DO rust+COPY_OUTPUT --output=$output

# SETUP : Common Rust setup.
SETUP:
    FUNCTION
    ARG keep_fingerprints=false
    ARG sweep_days=4

    # $EARTHLY_CACHE_PREFIX - MUST BE DONE IN A FUNCTION, OR IT PRODUCES THE WRONG VALUE
    ARG EARTHLY_TARGET_PROJECT_NO_TAG #https://docs.earthly.dev/docs/earthfile/builtin-args
    ARG TARGETARCH
    ARG TARGETOS
	  ARG TARGETVARIANT    
    ARG CACHE_VERSION="00001" # Bumping this causes the old cache to be dropped.
    ARG cache_prefix="${EARTHLY_TARGET_PROJECT_NO_TAG}#${TARGETOS}#${TARGETARCH}${TARGETVARIANT}#earthly-cargo-cache#${CACHE_VERSION}"

    FROM +installer --keep_fingerprints=$keep_fingerprints --sweep_days=$sweep_days --cache_prefix=$cache_prefix

    # The ONLY toolchain we support is the one in the installer.
    # DO NOT copy the `rust-toolchain.toml` file into CI as it breaks
    # the toolchain on some targets and leads to build failure.


# SYNC_STD_CFG : Syncs the standard config files locally.
SYNC_STD_CFG:
    FUNCTION

    SAVE ARTIFACT /stdcfgs/cargo_config.toml AS LOCAL .cargo/config.toml
    SAVE ARTIFACT /stdcfgs/clippy.toml AS LOCAL clippy.toml
    SAVE ARTIFACT /stdcfgs/nextest.toml AS LOCAL .config/nextest.toml
    SAVE ARTIFACT /stdcfgs/deny.toml AS LOCAL deny.toml
    SAVE ARTIFACT /stdcfgs/rustfmt.toml AS LOCAL rustfmt.toml
    SAVE ARTIFACT /stdcfgs/rust-toolchain.toml AS LOCAL rust-toolchain.toml

# FINGERPRINT_SRC  : Generates a fingerprint of the source.
FINGERPRINT_SRC:
    FUNCTION

    ARG WHENCE=..
    ARG DIR=build
    ARG FINGERPRINT=src_fingerprint.txt

    RUN cd $WHENCE; \
        tar -C ./ -cf - --sort=name --mtime='UTC 2019-01-01' --group=0 --owner=0 --numeric-owner $DIR \
        | sha256sum  > $FINGERPRINT
    RUN cat $WHENCE/$FINGERPRINT

REMOVE_SOURCE_FINGERPRINTS:
    FUNCTION
    DO rust+CHECK_INITED
    COPY rust+get-tomljson/tomljson /tmp/tomljson
    COPY rust+get-jq/jq /tmp/jq
    RUN  if [ ! -n "$EARTHLY_RUST_TARGET_CACHE" ]; then \
      echo "+SET_CACHE_MOUNTS_ENV has not been called yet in this build environment" ; \
      exit 1; \
    fi;
    RUN --mount=$EARTHLY_RUST_TARGET_CACHE \
        set -e;\
        source_libs=$(find . -name Cargo.toml -exec bash -c '/tmp/tomljson {} | /tmp/jq -r .package.name; printf "\n"' \;) ; \
        fingerprint_folders=$(find target -name .fingerprint) ; \
        for fingerprint_folder in $fingerprint_folders; do \
            if cd $fingerprint_folder ; then \
                for source_lib in $source_libs; do \
                    find . -maxdepth 1 -regex "\./$source_lib-[^-]+" -exec bash -c 'echo "deleting $(readlink -f {})"; rm -rf {}' \; ; \
                done \
            fi; \
         done;
    
# TODO(bkioshn): https://github.com/input-output-hk/catalyst-ci/issues/322
# Installing Rust
# Code reference from [rust1.81.0-slim-bookworm](https://github.com/rust-lang/docker-rust/blob/63f877a36f8ba9d9b4b35cd49df3327264510886/stable/bookworm/slim/Dockerfile)
INSTALL_RUST:
    FUNCTION

    ARG TARGETARCH

    ENV RUSTUP_HOME=/usr/local/rustup 
    ENV CARGO_HOME=/usr/local/cargo 
    ENV PATH=/usr/local/cargo/bin:$PATH 
    ENV RUST_VERSION=1.81.0

    IF [ "$TARGETARCH" = "amd64" ]
        LET PLATFORM = "x86_64-unknown-linux-gnu"
        LET RUSTUP_SHA = "6aeece6993e902708983b209d04c0d1dbb14ebb405ddb87def578d41f920f56d"
    ELSE IF [ "$TARGETARCH" = "arm64" ]
        LET PLATFORM = "aarch64-unknown-linux-gnu"
        LET RUSTUP_SHA = "1cffbf51e63e634c746f741de50649bbbcbd9dbe1de363c9ecef64e278dba2b2"
    ELSE
        RUN echo >&2 "unsupported architecture: ${TARGETARCH}"; exit 1
    END

    LET URL = "https://static.rust-lang.org/rustup/archive/1.27.1/${PLATFORM}/rustup-init"
    RUN wget $URL && echo "${RUSTUP_SHA} *rustup-init" | sha256sum -c - \
        && chmod +x rustup-init \
        && ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host $PLATFORM \
        && rm rustup-init \
        && chmod -R a+w $RUSTUP_HOME $CARGO_HOME \
        && rustup --version \
        && cargo --version \
        && rustc --version \
        && rm -rf /var/lib/apt/lists/*

      # Make sure we have cargo.
    RUN rustup component add cargo

    # Make sure we have the clippy linter.
    RUN rustup component add clippy

    # Needed to generate code coverage.
    RUN rustup component add llvm-tools-preview

    # Install a nightly toolchain which matches.
    RUN rustup toolchain install nightly --component miri --component rust-src --component rustfmt --component clippy --component cargo

    # Ensure we have all the necessary targets
    RUN rustup target add wasm32-unknown-unknown
    RUN rustup target add wasm32-wasip1
    # RUN rustup target add wasm32-wasip2 # wasm32-wasip2 not yet available in stable - Try again in 1.82
    RUN rustup target add x86_64-unknown-linux-gnu
    RUN rustup target add x86_64-apple-darwin
    RUN rustup target add x86_64-pc-windows-gnu
    RUN rustup target add aarch64-unknown-linux-gnu
    RUN rustup target add aarch64-apple-darwin

    RUN rustup target add wasm32-unknown-unknown --toolchain nightly
    RUN rustup target add wasm32-wasip1 --toolchain nightly 
    RUN rustup target add wasm32-wasip2 --toolchain nightly
    RUN rustup target add x86_64-unknown-linux-gnu --toolchain nightly
    RUN rustup target add x86_64-apple-darwin --toolchain nightly
    RUN rustup target add x86_64-pc-windows-gnu --toolchain nightly
    RUN rustup target add aarch64-unknown-linux-gnu --toolchain nightly
    RUN rustup target add aarch64-apple-darwin --toolchain nightly

# Install necessary tools for Rust.
INSTALL_TOOLS:
    FUNCTION
    # Install cargo-binstall so we can speed up tool installation.
    DO rust-tools+CARGO_BINSTALL_INSTALL

    DO +COPY_TOOL --tool="cargo-nextest"
    DO +COPY_TOOL --tool="cargo-machete"
    DO +COPY_TOOL --tool="refinery"
    DO +COPY_TOOL --tool="cargo-deny"
    DO +COPY_TOOL --tool="cargo-modules"
    DO +COPY_TOOL --tool="cargo-depgraph"
    DO +COPY_TOOL --tool="cargo-llvm-cov"
    DO +COPY_TOOL --tool="wasm-tools"
    DO +COPY_TOOL --tool="cargo-expand"
    DO +COPY_TOOL --tool="wit-bindgen"
    DO +COPY_TOOL --tool="cargo-sweep"
    DO +COPY_TOOL --tool="cargo-component"
    DO +COPY_TOOL --tool="wasm-pack"
    DO +COPY_TOOL --tool="flutter-rust-bridge-codegen" --bin="flutter_rust_bridge_codegen"
    