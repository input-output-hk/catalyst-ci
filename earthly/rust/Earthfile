# Common Rust UDCs and Builders.
VERSION 0.7

# cspell: words rustup rustc automake autotools xutils miri nextest kani

# Base Rustup build container.
rustup:
    # Base it on Debian bookworm-slim
    FROM debian:bookworm-slim

    WORKDIR /root

    # Set necessary env vars from this setup.
    ENV RUSTUP_HOME=/usr/local/rustup
    ENV CARGO_HOME=/usr/local/cargo
    ENV CARGO_HOME_BIN=$CARGO_HOME/bin
    ENV PATH=$CARGO_HOME_BIN:$PATH    

    # Ensure correct directory permissions on the install locations.
    RUN mkdir -p $RUSTUP_HOME && \
        mkdir -p $CARGO_HOME_BIN && \
        chmod -R a+w $RUSTUP_HOME $CARGO_HOME

    # Install necessary packages 
    # Expand this list as needed, rather than adding more tools in later containers.
    RUN apt-get update && \
        apt-get install --no-install-recommends -y \
            ca-certificates \
            curl \
            file \
            build-essential \
            autoconf \
            automake \
            autotools-dev \
            libtool \
            xutils-dev \
            mold \
            python3 \
            python3-pip \
            musl-tools \
            clang && \
        rm -rf /var/lib/apt/lists/*

    # Install OpenSSL here but ONLY if we can't avoid using it.

    # Install rustup.
    RUN curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none -y -v

    # Install the default cargo config.
    COPY config.toml $CARGO_HOME/config.toml

# Common Rust setup
# Parameters:
#  * toolchain : The `rust-toolchain` toml file.
#  * with_cargo_nextest: <true/false> Flag to install cargo-nextest tool
#  * with_cargo_chef: <true/false> Flag to install cargo-chef tool
#  * with_kani: <true/false> Flag to install kani-verifier and kani tools
#  * with_refinery: <true/false> Flag to install refinery tool
#  * with_cargo_machete: <true/false> Flag to install cargo-machete tool
RUST_SETUP:
    COMMAND
    ARG toolchain=./rust-toolchain.toml

    ARG with_cargo_nextest=false
    ARG with_cargo_chef=false
    ARG with_kani=false
    ARG with_refinery=false
    ARG with_cargo_machete=false

    # Poetry Installation directory.
    # Gives poetry and our poetry project a reliable location.
    WORKDIR /build

    # Copy our toolchain dependency.
    COPY $toolchain ./rust-toolchain.toml
    ENV default_rust_channel=$(grep -oP 'channel\s*=\s*"\K[^"]+' rust-toolchain.toml)

    # Install pinned Rustup from `rust-toolchain.toml`
    # Plus nightly latest so we can use it for docs, lints, etc.
    RUN rustup default $default_rust_channel && \
        rustup show && \
        rustup toolchain install nightly --component miri --component rust-src && \
        cargo --version && \
        cargo +nightly --version

    # Install tools we use commonly with `cargo`.
    IF [ "$with_cargo_nextest" = "true" ]
        RUN cargo install cargo-nextest --locked
    END
    IF [ "$with_cargo_chef" = "true" ]
        RUN cargo install cargo-chef --locked
    END
    IF [ "$with_kani" = "true" ]
        RUN cargo install kani-verifier --locked && \
        cargo kani setup
    END
    IF [ "$with_refinery" = "true" ]
        RUN cargo install refinery_cli --locked
    END
    IF [ "$with_cargo_machete" = "true" ]
        RUN cargo install cargo-machete --locked
    END

# Test rust build container
check:
    FROM +rustup

    ARG with_cargo_nextest=true
    ARG with_cargo_chef=true
    ARG with_kani=true
    ARG with_refinery=true
    ARG with_cargo_machete=true

    DO +RUST_SETUP \
        --toolchain=example/rust-toolchain.toml \
        --with_cargo_nextest="$with_cargo_nextest" \
        --with_cargo_chef="$with_cargo_chef" \
        --with_kani="$with_kani" \
        --with_refinery="$with_refinery" \
        --with_cargo_machete="$with_cargo_machete"

    # Check all the expected tooling is installed and works for both the stable and nightly versions.
    RUN rustc --version && \
        rustc +nightly --version && \
        cargo --version && \
        cargo +nightly --version &&  \
        cargo clippy --version && \
        cargo +nightly clippy --version && \
        refinery --version && \
        mold --version
    IF [ "$with_cargo_nextest" = "true" ]
        RUN cargo nextest --version
    END
    IF [ "$with_cargo_chef" = "true" ]
        RUN cargo chef --version
    END
    IF [ "$with_kani" = "true" ]
        RUN cargo kani --version
    END
    IF [ "$with_refinery" = "true" ]
        RUN refinery --version
    END
    IF [ "$with_cargo_machete" = "true" ]
        RUN cargo machete --version
    END
