# Common Python UDCs and Builders.
VERSION 0.8

IMPORT ../../utilities/scripts AS scripts
IMPORT ../../ AS cat-ci
# IMPORT ../debian AS debian
IMPORT ../chainguard AS chainguard
IMPORT ../cue AS cue
IMPORT ../graphviz AS graphviz


# Define a constant name for the container and its version.
# ARG --global PYTHON_IMAGE="harbor.shared-services.projectcatalyst.io/dockerhub/library/python"
ARG --global PYTHON_IMAGE="cgr.dev/chainguard/python:latest-dev" 

# cspell: words libjpeg ruff

python-base:
    # FROM ${PYTHON_IMAGE}:3.13-slim-trixie
    FROM $PYTHON_IMAGE
    
    # https://edu.chainguard.dev/chainguard/migration/migration-guides/migrating-python/#differences-from-the-docker-official-image
    USER root

    # Install necessary packages
    # LET PACKAGES= \
    #     bash \
    #     curl \
    #     libffi-dev \
    #     gcc \
    #     musl-dev \
    #     zlib1g-dev \
    #     libjpeg-dev \
    #     git \
    #     jq
    # DO debian+INSTALL --packages=$PACKAGES
    LET PACKAGES= \
        bash \
        curl \
        libffi-dev \
        gcc \
        zlib-dev \
        libjpeg-dev \
        git \
        jq
    DO chainguard+INSTALL --packages=$PACKAGES

    # Install CUE
    DO cue+INSTALL

    # Install Graphviz
    DO graphviz+INSTALL

    # Poetry Installation directory.
    # Gives poetry and our poetry project a reliable location.
    WORKDIR /poetry
    ENV POETRY_HOME=/poetry
    ENV PATH=$POETRY_HOME/bin:$PATH

    # Stop python code running in the container saving pointless .pyc files.
    ENV PYTHONDONTWRITEBYTECODE=1

    # Install Poetry using the recommended installer.
    RUN curl -sSL https://install.python-poetry.org | python3 - --version 2.0.0

    # Adjust Poetry's configuration to prevent connection pool warnings.
    RUN poetry config installer.max-workers 10

    # Install UV through the recommended installer.
    RUN curl -LsSf https://astral.sh/uv/install.sh | sh
    ENV PATH=$HOME/.local/bin:$PATH

    # Extension we use needs rust.
    RUN curl https://sh.rustup.rs -sSf | bash -s -- -y
    RUN echo 'source $HOME/.cargo/env' >> $HOME/.bashrc
    ENV PATH="/root/.cargo/bin:${PATH}"

    # Install ruff for linting.
    RUN pip3 install ruff
    RUN pip3 install rich
    RUN pip3 install third-party-imports

    # Universal build scripts we will always need and are not target dependent.
    COPY --dir scripts /scripts
    # Copy our common scripts so we can use them inside the container.
    DO scripts+ADD_BASH_SCRIPTS
    DO scripts+ADD_PYTHON_SCRIPTS

BUILDER:
    FUNCTION

    ARG opts

    # Copy our dependencies.
    COPY pyproject.toml poetry.lock Readme.md .

    # Install it all with poetry
    RUN poetry install $opts

CHECK:
    FUNCTION
    ARG options

    # Execute the check script
    RUN /scripts/std_checks.py $options

LINT_PYTHON:
    # Linting all Python code is done with ruff
    # See: https://github.com/charliermarsh/ruff
    FUNCTION

    # Where we want to run the `lint` from. Use `.` to check the whole repo.
    ARG src=.

    FROM ${PYTHON_IMAGE}:3.13
    WORKDIR /work

    # Install ruff
    RUN pip install ruff

    COPY $src .
    COPY cat-ci+repo-config/repo/ruff.toml ruff.toml.std

    RUN diff -Nau ruff.toml ruff.toml.std

    RUN ruff format --check && \
        ruff check --output-format=github .

