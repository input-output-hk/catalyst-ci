# Common Python UDCs and Builders.
VERSION --global-cache --use-function-keyword 0.7

# cspell: words libgcc flake8

python-base:
    FROM python:3.12-alpine3.19

    # Install extra packages we will need to support plugins, including zlib libraries.
    RUN apk add --no-cache \
        curl \
        libffi-dev \
        gcc \
        musl-dev \
        libgcc \
        zlib-dev \
        jpeg-dev \

    # Set up a virtual environment
    ENV VIRTUAL_ENV=/opt/venv
    RUN python3 -m venv $VIRTUAL_ENV
    ENV PATH="$VIRTUAL_ENV/bin:$PATH"

    # Poetry Installation directory.
    # Gives poetry and our poetry project a reliable location.
    WORKDIR /poetry
    ENV POETRY_HOME=/poetry
    ENV PATH=$POETRY_HOME/bin:$PATH

    # Stop python code running in the container saving pointless .pyc files.
    ENV PYTHONDONTWRITEBYTECODE=1

    # Install Poetry using the recommended installer.
    RUN curl -sSL https://install.python-poetry.org | python3 -

    # Adjust Poetry's configuration to prevent connection pool warnings.
    RUN poetry config installer.max-workers 10

    # Install flake8 for linting.
    RUN pip3 install flake8

# Utilize the POETRY_SETUP UDC for setting up Poetry within our environment.
poetry:
    FROM +python-base
    # The setup steps for POETRY_SETUP would be included here, assuming it's defined elsewhere.
    # This placeholder assumes the necessary Poetry and project setup is performed here.

BUILDER:
    FUNCTION
    FROM +poetry
    # Copy project-specific files for the poetry installation and source code for linting.
    COPY pyproject.toml poetry.lock .
    WORKDIR .
    
    # Install dependencies using poetry
    RUN poetry install

    # Lint the application using flake8.
    RUN flake8 .