# Common Python UDCs and Builders.
VERSION 0.8

IMPORT ../../utilities/scripts AS scripts

# cspell: words libgcc ruff

python-base:
    FROM python:3.12-alpine3.20

    # Install necessary packages
    RUN apk add --no-cache \
        bash \
        curl \
        libffi-dev \
        gcc \
        musl-dev \
        libgcc \
        zlib-dev \
        jpeg-dev \
        git

    # Poetry Installation directory.
    # Gives poetry and our poetry project a reliable location.
    WORKDIR /poetry
    ENV POETRY_HOME=/poetry
    ENV PATH=$POETRY_HOME/bin:$PATH

    # Stop python code running in the container saving pointless .pyc files.
    ENV PYTHONDONTWRITEBYTECODE=1

    # Install Poetry using the recommended installer.
    RUN curl -sSL https://install.python-poetry.org | python3 - --version 2.0.0

    # Adjust Poetry's configuration to prevent connection pool warnings.
    RUN poetry config installer.max-workers 10

    # Install ruff for linting.
    RUN pip3 install ruff
    RUN pip3 install rich
    RUN pip3 install third-party-imports

    # Universal build scripts we will always need and are not target dependent.
    COPY --dir scripts /scripts
    # Copy our common scripts so we can use them inside the container.
    DO scripts+ADD_BASH_SCRIPTS
    DO scripts+ADD_PYTHON_SCRIPTS

BUILDER:
    FUNCTION

    ARG opts

    # Copy our dependencies.
    COPY pyproject.toml poetry.lock Readme.md .

    # Install it all with poetry
    RUN poetry install $opts

CHECK:
    FUNCTION
    ARG options=""

    # Execute the check script
    RUN /scripts/std_checks.py $options

LINT_PYTHON:
    # Linting all Python code is done with ruff
    # See: https://github.com/charliermarsh/ruff
    FUNCTION

    # Where we want to run the `lint` from. Use `.` to check the whole repo.
    ARG src=.

    FROM python:3.9
    WORKDIR /work

    # Install ruff
    RUN pip install ruff

    COPY $src .

    RUN ruff .
