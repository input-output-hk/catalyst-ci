# Common Python UDCs and Builders.
VERSION --global-cache --use-function-keyword 0.7

# cspell: words libgcc flake8

python-base:
    FROM python:3.12-alpine3.19

    # Install extra packages we will need to support plugins.
    RUN apk add --no-cache curl
    RUN apk add --no-cache libffi-dev
    RUN apk add --no-cache gcc
    RUN apk add --no-cache musl-dev
    RUN apk add --no-cache libgcc

    # Set up a virtual environment
    ENV VIRTUAL_ENV=/opt/venv
    RUN python3 -m venv $VIRTUAL_ENV
    ENV PATH="$VIRTUAL_ENV/bin:$PATH"

    # Poetry Installation directory.
    # Gives poetry and our poetry project a reliable location.
    WORKDIR /poetry
    ENV POETRY_HOME=/poetry
    ENV PATH=$POETRY_HOME/bin:$PATH

    # Stop python code running in the container saving pointless .pyc files.
    ENV PYTHONDONTWRITEBYTECODE=1
    
    # Install Poetry to manage python.
    RUN curl -sSL https://install.python-poetry.org | python3 -
    # Prevent warning when running on machines with more than 6 cores.
    #   "Connection pool is full, discarding connection: pypi.org. Connection pool size: 10"
    RUN poetry config installer.max-workers 10
    
    # Install flake8 globally using Poetry
    RUN pip3 install flake8

BUILDER:
    FUNCTION
    ARG opts=""

    FROM +python-base

    # Copy our dependencies.
    COPY pyproject.toml poetry.lock .

    # Install it all with poetry
    RUN poetry install $opts

PYTHON_LINT:
    FUNCTION
    # Optionally, specify the directory containing Python code to lint.
    ARG src_dir=./src

    FROM +python-base

    # Copy the source code directory to the container.
    COPY $src_dir /app

    WORKDIR /app

    # Run flake8 to lint the Python code.
    # Adjust flake8 options as needed.
    RUN flake8 .